import{_ as i,M as p,p as c,q as l,R as n,t as s,N as e,a1 as t}from"./framework-c8e009f3.js";const o={},d=t(`<h1 id="media" tabindex="-1"><a class="header-anchor" href="#media" aria-hidden="true">#</a> <code>@media</code></h1><p>如何让手机用户、桌面端用户、不同显示器大小的用户都获得良好的浏览体验？那么就需要用到<code>@media</code> 参数来做帮忙。</p><p><code>@media</code> 的意思是<strong>媒体查询</strong>，为查询的设备信息（如分辨率大小）编写相应的样式。</p><h3 id="为-打印-功能提供相应的样式" tabindex="-1"><a class="header-anchor" href="#为-打印-功能提供相应的样式" aria-hidden="true">#</a> 为“打印”功能提供相应的样式</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> print</span><span class="token punctuation">{</span>
	<span class="token selector">body</span> <span class="token punctuation">{</span>
		<span class="token comment">/* 打印室建议使用绝对单位pt，其他的所有单位都是相对的，基于分辨率的 */</span>
		<span class="token property">font-size</span> <span class="token punctuation">:</span>10pt<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> screen</span><span class="token punctuation">{</span>
	<span class="token selector">body</span> <span class="token punctuation">{</span>
		<span class="token property">font-size</span> <span class="token punctuation">:</span>13px<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同时为两种设备提供相应的格式" tabindex="-1"><a class="header-anchor" href="#同时为两种设备提供相应的格式" aria-hidden="true">#</a> 同时为两种设备提供相应的格式：</h3><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> screen<span class="token punctuation">,</span> print</span> <span class="token punctuation">{</span>
  <span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="max-min-width" tabindex="-1"><a class="header-anchor" href="#max-min-width" aria-hidden="true">#</a> max/min-width</h2><p>虽然我们已经有了媒体查询方法，但我们显然没法给出一个固定的分辨率大小，因为大部分手机的宽高都是不同的：</p><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/Untitled.png" alt=""></p>`,10),u={href:"https://uiiiuiii.com/screen/",target:"_blank",rel:"noopener noreferrer"},r=t(`<p>因此，我们在查询媒体时应该给出的是分辨率的一个区间范围，例如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span>height &gt; 600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.4<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然这种写法更容易让人接受，但其实它是在媒体查询的第四版（<em>media queries level 4</em>）才引入的写法，依然有一些浏览器没有对其进行支持。</p><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/media_query_v4_support.png" alt=""></p>`,4),m={href:"https://caniuse.com/?search=media%20queries",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>因此我们依然需要使用第三版的写法，即max-min 写法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span>100px &lt;= width &lt;= 1900px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token comment">/*min-width表示我能接受的最小宽度是100px，如果你在100以上，则匹配成功*/</span>
<span class="token comment">/*max-width表示我能接受的最大宽度是1900px，如果你在1900以下，则匹配成功*/</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1900px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="再举一个响应式布局的简单例子" tabindex="-1"><a class="header-anchor" href="#再举一个响应式布局的简单例子" aria-hidden="true">#</a> 再举一个响应式布局的简单例子</h2><p>100px- 400px 之间是红色，大于400px是蓝色。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span> <span class="token punctuation">:</span>100px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">.a</span><span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span> <span class="token punctuation">:</span>400px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">.a</span><span class="token punctuation">{</span>
        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>abc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/responsible_layout.gif" alt=""></p><h2 id="媒体查询中的逻辑运算符" tabindex="-1"><a class="header-anchor" href="#媒体查询中的逻辑运算符" aria-hidden="true">#</a> 媒体查询中的逻辑运算符</h2><p><code>and</code> 运算符表示取交集，比如<code>@media all and (min-width : 400px)</code> 表示 ：<strong>全集和”大于400px” 取交集 = “大于400px”</strong></p><p><code>not</code> 运算符是将其后面的语句取补集，下面的 <code>@media not all and (min-width : 400px)</code> 会被看作一个整体进行取反，即 ：<strong>“大于400px” 取反 = “小于400px”</strong>.</p>`,10),k=n("code",null,"all",-1),h=n("code",null,"@media not (min-width : 400px)",-1),b={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Media_Queries/Using_media_queries#%E5%88%9B%E5%BB%BA%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2",target:"_blank",rel:"noopener noreferrer"},g=n("blockquote",null,[n("p",null,[s("在大多数情况下，默认情况下，如果未指定其他类型，则使用 "),n("code",null,"all"),s("媒体类型。但是，如果使用 "),n("code",null,"not"),s("或 "),n("code",null,"only"),s("运算符，则必须显式指定媒体类型。")])],-1),x=n("aside",null," 💡 但事实上，笔者尝试直接使用`@media not (min-width : 400px)`可以获得和`@media not all and (min-width : 400px)`一样的效果。猜测是Chrome浏览器做了优化，或者媒体查询V4版本做了改进，但不是一个关键问题，不再继续查询原因。 ",-1);function _(y,f){const a=p("ExternalLinkIcon");return c(),l("div",null,[d,n("p",null,[n("a",u,[s("https://uiiiuiii.com/screen/"),e(a)])]),r,n("p",null,[n("a",m,[s("https://caniuse.com/?search=media queries"),e(a)])]),v,n("p",null,[s("但是为什么要加 "),k,s(" 呢，直接写："),h,s("不可以吗？"),n("a",b,[s("MDN"),e(a)]),s("上是这样说的：")]),g,x])}const q=i(o,[["render",_],["__file","10.media.html.vue"]]);export{q as default};
