import{_ as n,p as s,q as a,a1 as t}from"./framework-c8e009f3.js";const p={},o=t(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>传统的视图渲染是这样的：</p><ol><li>点击交互按钮</li><li>更改状态</li><li>发送请求</li><li>渲染结果</li></ol><p>假设这样一种情况，用户点击按钮后，需要发送一个请求来判断是否当前用户拥有查看数据的权限，若有，发送第二个请求（设两个请求时间相等）。那么，我们能不能同时发送两个请求，根据第一个请求的结果来判断是否展示第二个请求呢？答案是可以的，这就是数据预取。</p><h2 id="userecoilcallback" tabindex="-1"><a class="header-anchor" href="#userecoilcallback" aria-hidden="true">#</a> useRecoilCallback</h2><p>它是一个回调函数，简单来说，它的作用就是允许你在<strong>读写Recoil状态</strong>的前后执行一些别的操作。常用的场景有：</p><ul><li>执行一些不需要渲染出来的操作，如数据预取</li><li>动态更新某一个<code>atom或selector</code>————往常你需要固定提供状态的key值</li></ul><p>它的结构如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">CallbackInterface</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  snapshot<span class="token operator">:</span> Snapshot<span class="token punctuation">,</span> <span class="token comment">// 快照，获取atom状态</span>
  <span class="token function-variable function">gotoSnapshot</span><span class="token operator">:</span> Snapshot <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  set<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>RecoilState<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token constant">T</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token comment">// 用于设置atom值</span>
  reset<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>RecoilState<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useRecoilCallback</span><span class="token generic class-name"><span class="token operator">&lt;</span>Args<span class="token punctuation">,</span> ReturnValue<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  <span class="token function-variable function">callback</span><span class="token operator">:</span> CallbackInterface <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token operator">...</span>Args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ReturnValue<span class="token punctuation">,</span> <span class="token comment">// 回调函数，在这里获取atom状态（快照），并执行一些操作</span>
  deps<span class="token operator">?</span><span class="token operator">:</span> $ReadOnlyArray<span class="token operator">&lt;</span>mixed<span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>Args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ReturnValue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于<strong>snapshot快照</strong>：它可以用来<strong>查看</strong>atoms的状态，不可改变，其结构为</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Snapshot</span> <span class="token punctuation">{</span>
  <span class="token comment">// 检查快照状态的访问器</span>
  getLoadable<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>RecoilValue<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Loadable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 获取loadable状态，可用于执行查询操作，用于数据预取</span>
  getPromise<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>RecoilValue<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// 用于跟踪请求Promise的状态</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们编写一个数据预取的例子：</p><ol><li>点击按钮，请求用户数据</li><li>在<code>useRecoilCallback</code>中用<code>snapshot.getLoadable</code>预取数据</li><li>修改<code>atom</code>状态,更改用户id</li><li>根据<code>selector</code>对用户id的依赖，请求用户数据，因为在2中已经发送了请求，内部会调用<code>getPromise</code>跟踪请求，不会重新发送新的请求</li><li>请求完成，渲染视图</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
    RecoilRoot<span class="token punctuation">,</span>
    selector<span class="token punctuation">,</span>
    useRecoilCallback<span class="token punctuation">,</span> atom<span class="token punctuation">,</span> selectorFamily<span class="token punctuation">,</span> useRecoilValue
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;recoil&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token comment">// 请求数据</span>
<span class="token keyword">const</span> fetchData <span class="token operator">=</span> <span class="token function">selectorFamily</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;fetchData&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;发送请求...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/user?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;请求完成&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 用户id</span>
<span class="token keyword">const</span> userId <span class="token operator">=</span> <span class="token function">atom</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;userId&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 根据用户id改变请求数据，返回请求的结果</span>
<span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;userInfo&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> get <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">User</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token function">useRecoilValue</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token comment">// 获取请求的用户数据</span>

    <span class="token keyword">const</span> getUserInfo <span class="token operator">=</span> <span class="token function">useRecoilCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> snapshot<span class="token punctuation">,</span> set <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        snapshot<span class="token punctuation">.</span><span class="token function">getLoadable</span><span class="token punctuation">(</span><span class="token function">fetchData</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 预读取数据</span>
        <span class="token function">set</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token comment">// 更新渲染</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>获取用户信息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>info<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>RecoilRoot<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>User <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>RecoilRoot<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结：<strong>事实上，我们并没有改变</strong>修改state -&gt; 获取数据</strong>的数据流，我们只是在前面加了一步数据预取，<code>Recoil</code>帮我们完成了请求去重的任务。</p>`,15),e=[o];function c(l,i){return s(),a("div",null,e)}const u=n(p,[["render",c],["__file","03.数据预取.html.vue"]]);export{u as default};
