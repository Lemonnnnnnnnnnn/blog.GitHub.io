import{_ as t,M as o,p as c,q as l,R as n,t as s,N as e,a1 as a}from"./framework-c8e009f3.js";const i={},u=a(`<h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><h4 id="args-可变参数-不带名剩余参数" tabindex="-1"><a class="header-anchor" href="#args-可变参数-不带名剩余参数" aria-hidden="true">#</a> *args 可变参数（不带名剩余参数）</h4><p>在函数入参的名字前加上<code>*</code>表示可变参数（剩余参数）（不是指针！）。</p><ul><li><code>*args</code>是惯用名</li><li>只能有一个<code>*</code>参数</li><li><code>*</code>参数只能是最后一个参数（<strong>没有</strong>参数时**）</li><li><code>*</code>参数的类型是 <code>tuple</code>元组</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">addition</span><span class="token punctuation">(</span>firstArg <span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> firstArg 
    <span class="token keyword">for</span> arg <span class="token keyword">in</span> args <span class="token punctuation">:</span>
        res <span class="token operator">+=</span> arg
    <span class="token keyword">return</span> res

<span class="token keyword">print</span><span class="token punctuation">(</span>addition<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="kwargs-关键字参数-带名剩余参数" tabindex="-1"><a class="header-anchor" href="#kwargs-关键字参数-带名剩余参数" aria-hidden="true">#</a> **kwargs 关键字参数(带名剩余参数)</h4><p>我们常常会为函数提供一些默认参数，来降低调用函数的复杂度：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">enroll</span><span class="token punctuation">(</span>name <span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">,</span> city <span class="token operator">=</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span>

enroll<span class="token punctuation">(</span><span class="token string">&#39;liming&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但需要我们要显式的提供<code>city</code>参数时，似乎必须要提供所有参数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>enroll<span class="token punctuation">(</span><span class="token string">&#39;liming&#39;</span> <span class="token punctuation">,</span> <span class="token number">17</span> <span class="token punctuation">,</span> <span class="token string">&#39;福州&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有没有办法不按顺序来提供默认参数呢？有的，只要在调用函数时添加函数入参的名字：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>enroll<span class="token punctuation">(</span><span class="token string">&#39;liming&#39;</span> <span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">&#39;福州&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在函数入参的名字前加上<code>**</code>表示剩余<strong>带名参数</strong></p><ul><li><code>**kwargs</code> 是通用名</li><li>只能有一个<code>**</code>参数</li><li><code>**kwargs</code> 只能是最后一个参数，在<code>*args</code>之后</li><li><code>**</code>参数的类型是 <code>dict</code>字典</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>
    
myFunction<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mars&quot;</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">46</span><span class="token punctuation">)</span>
<span class="token comment"># (&#39;hello&#39;, &#39;mars&#39;)</span>
<span class="token comment"># 24</span>
<span class="token comment"># {&#39;b&#39;: 87, &#39;c&#39;: 3, &#39;d&#39;: 46}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="默认参数的坑" tabindex="-1"><a class="header-anchor" href="#默认参数的坑" aria-hidden="true">#</a> 默认参数的坑</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">add_end</span><span class="token punctuation">(</span>l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>


add_end<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># [&#39;end&#39;]</span>
add_end<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># [&#39;end&#39; , &#39;end&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数会这样执行：</p><ul><li>初始化入参<code>l = []</code>，</li><li>调用函数，未输入参数，取初始参数<code>l = []</code> 结果： <code>[&#39;end&#39;]</code></li><li>调用函数，未输入参数，取初始参数<code>l = [&#39;end&#39;]</code> （指针没变！）, <code>[&#39;end&#39; , &#39;end&#39;]</code></li></ul><p>你可以这样修改：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">add_end2</span><span class="token punctuation">(</span>l<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>

add_end2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># [&#39;end&#39;]</span>
add_end2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># [&#39;end&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样每次执行时都会为变量 <code>l</code> 新分配一个 <code>[]list</code>。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>列表、元组、字典、set等等数据类型都是可变对象。</p><p>str、None等等数据类型则是不变对象</p></div><h4 id="必填参数" tabindex="-1"><a class="header-anchor" href="#必填参数" aria-hidden="true">#</a> 必填参数</h4><p>函数定义的所有参数都会被认为是必填参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span> <span class="token comment"># person() missing 3 required positional arguments: &#39;name&#39;, &#39;age&#39;, and &#39;job&#39;</span>

person<span class="token punctuation">(</span>city <span class="token operator">=</span> <span class="token string">&#39;beijing&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数顺序" tabindex="-1"><a class="header-anchor" href="#参数顺序" aria-hidden="true">#</a> 参数顺序</h4><p>参数定义的顺序必须是：</p><ul><li>必选参数 , <code>name</code></li><li>默认参数 , <code>name=&#39;lihua&#39;</code></li><li>可变参数 , <code>*args</code></li><li>关键字参数 , <code>**kwargs</code></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;lihua&#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 无法通过编译 Non-default argument follows default argument</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lambda函数-匿名函数" tabindex="-1"><a class="header-anchor" href="#lambda函数-匿名函数" aria-hidden="true">#</a> lambda函数(匿名函数)</h3><p><code>lambda 入参：返回值表达式</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x

r <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
r2 <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 4</span>

<span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token keyword">lambda</span> n <span class="token punctuation">:</span> x <span class="token operator">*</span> n

<span class="token keyword">print</span><span class="token punctuation">(</span> f2<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment"># 6</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="尾递归函数" tabindex="-1"><a class="header-anchor" href="#尾递归函数" aria-hidden="true">#</a> 尾递归函数</h3><p>以一个经典的递归函数举例，它会执行一个累积计算：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> fact<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归函数会造成栈溢出，因为它会不断初始化新的递归函数放入栈中：</p><ul><li>fact(5)</li><li>5 * fact(4)</li><li>5 * (4 * fact(3))</li><li>...</li></ul><p>如果输入 <code>fact(1000)</code> 就会发生栈溢出： <code>RuntimeError: maximum recursion depth exceeded in comparison</code></p><p>因此我们需要使用<strong>尾递归调用</strong>，实际上就是<strong>函数 return 自身，仅参数不同</strong>，这样执行的时候就只会保留一个堆栈</p><p>例如累积计算实际可以转换成接收两个参数，<strong>当前要乘的数</strong> 和 <strong>上一轮计算的结果</strong> ， 并将两者相乘</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>num <span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> res <span class="token comment"># 返回相乘结果 </span>
    <span class="token keyword">return</span> fact<span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">,</span> res <span class="token operator">*</span> num<span class="token punctuation">)</span> <span class="token comment"># 将相乘结果和下一轮要乘的数传给下一个函数</span>

<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> fact<span class="token punctuation">(</span>num <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 1作为初始结果</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>run<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>我们使用递归通常是为了简介的写法，但执行效率不高，尾递归是一种折中的办法</p></div><h3 id="闭包函数与for循环" tabindex="-1"><a class="header-anchor" href="#闭包函数与for循环" aria-hidden="true">#</a> 闭包函数与for循环</h3><p>这是一个经典的闭包例子，count函数生成一个函数列表，每个函数计算1-3数字的平方和：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> i <span class="token operator">*</span> i
        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>compute<span class="token punctuation">)</span>
    <span class="token keyword">return</span> fs

f1<span class="token punctuation">,</span>f2<span class="token punctuation">,</span>f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 我们希望得到的结果是1*1 = 1，但这里返回了9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>闭包函数实际上简单理解就是 <strong>执行时才计算的懒函数</strong>，这里等到我们执行函数 <code>f1</code> 的时候，for循环早就结束了，导致 <code>compute</code> 函数中 i 的引用指向的值是3，因此返回了结果9：</p><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220602104850.png" alt=""></p><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>返回闭包函数时注意：函数不要引用 <strong>循环变量</strong> 和 <strong>会发生变化的数据结构（列表，字典）</strong></p></div><p>如果一定要用循环变量的话，其实也有解决办法，答案是改变所调用参数的引用。</p><p>原先 <code>compute</code> 函数保持对循环变量 i 的引用。我们调用一个普通函数将当前的 i 变量的值保存下来：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        
        <span class="token keyword">def</span> <span class="token function">keep</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>  
            <span class="token keyword">def</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> num <span class="token operator">*</span> num
            <span class="token keyword">return</span> compute
        
        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>keep<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> fs

f1<span class="token punctuation">,</span>f2<span class="token punctuation">,</span>f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="装饰器" tabindex="-1"><a class="header-anchor" href="#装饰器" aria-hidden="true">#</a> 装饰器</h3><p>装饰器的本质是用一个函数包裹源函数，形成嵌套结构，包裹函数相当于为原函数添加了一层“装饰”。包裹函数返回一个新的函数，我们调用的是新函数而不是原函数，因此需要用<code>*args , **kwargs</code> 获取给新函数传入的参数并用它来执行原函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;call&#39;</span> <span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span> <span class="token comment"># 打印函数名</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args <span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 装饰后返回的新函数，*args和 **kwargs 接收调用时传入的参数</span>
        func<span class="token punctuation">(</span><span class="token operator">*</span>args <span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> <span class="token comment"># 用传入的参数执行原函数</span>
    <span class="token keyword">return</span> wrapper

<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span> <span class="token punctuation">,</span>name<span class="token punctuation">)</span>

newHello <span class="token operator">=</span> log<span class="token punctuation">(</span>hello<span class="token punctuation">)</span> <span class="token comment"># newHello = wrapper</span>

newHello<span class="token punctuation">(</span><span class="token string">&#39;liming&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># call hello , hello liming</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>python</code> 提供了一种方便的语法糖来简化上面的写法，不用改变装饰器函数的写法，只是 <strong>包裹</strong> 和 <strong>调用</strong> 的时候有一些区别：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@log</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span> <span class="token punctuation">,</span>name<span class="token punctuation">)</span>

hello<span class="token punctuation">(</span><span class="token string">&#39;liming&#39;</span><span class="token punctuation">)</span> <span class="token comment"># call hello , hello liming</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将 <code>@装饰器函数</code> 写在需要原函数的上一行，它会自动将原函数作为<strong>唯一参数</strong>传入装饰器函数中</li><li>这样装饰过的函数的名字和原函数一致，你可以理解为它执行了 <code>hello = log(hello) </code></li></ul><p>因为装饰器函数返回新函数的写法总是一致的：用传入的参数执行原函数，所以似乎用 <strong>匿名函数lambda</strong>编写看起来更简洁舒适：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;call&#39;</span> <span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span> <span class="token comment"># 打印函数名</span>
    <span class="token keyword">return</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args <span class="token punctuation">,</span> <span class="token operator">**</span>kwargs <span class="token punctuation">:</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args <span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>@</code> 语法糖进行装饰器的添加虽然十分便捷，但如果我们要将参数和原函数一起传入装饰器中就不太好办了。因为 <code>@</code> 只会将下一行的原函数作为 <strong>唯一参数</strong> 传入装饰器。为了解决传参问题，我们需要在装饰器外面<strong>多包装一层函数用来接收参数</strong>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>user <span class="token punctuation">,</span> operate<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> operate <span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span> <span class="token comment"># 打印函数名</span>
        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args <span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 装饰后返回的新函数，*args和 **kwargs 接收调用时传入的参数</span>
            func<span class="token punctuation">(</span><span class="token operator">*</span>args <span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span> <span class="token comment"># 用传入的参数执行原函数</span>
        <span class="token keyword">return</span> wrapper
    <span class="token keyword">return</span> decorator

<span class="token decorator annotation punctuation">@log</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span> <span class="token punctuation">,</span> <span class="token string">&#39;call&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span> <span class="token punctuation">,</span>name<span class="token punctuation">)</span>

hello<span class="token punctuation">(</span><span class="token string">&#39;liming&#39;</span><span class="token punctuation">)</span> <span class="token comment"># root call hello ; hello liming</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们真正做的事情是：</p><ol><li>执行外层函数，将参数传入，<strong>并返回一个装饰器</strong></li><li>用返回的装饰器包装原函数</li></ol>`,65),r={class:"custom-container tip"},d=n("p",{class:"custom-container-title"},"TIP",-1),k={href:"/python/06.%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AF%A6%E8%A7%A3.html",target:"_blank",rel:"noopener noreferrer"},m=a(`<h2 id="常用函数" tabindex="-1"><a class="header-anchor" href="#常用函数" aria-hidden="true">#</a> 常用函数</h2><h3 id="map-reduce-filter" tabindex="-1"><a class="header-anchor" href="#map-reduce-filter" aria-hidden="true">#</a> map/reduce/filter</h3><p><code>map</code> 允许我们传入两个参数,<code>map(处理函数，可迭代对象)</code>, map将会为可迭代对象的每个元素套用处理函数，并返回一个新的map，map是一个 <strong>惰性序列</strong>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x
r <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># r  = &lt;map object at 0x000001E91CEDF280&gt;</span>
<span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>惰性序列比较像js中的闭包函数————函数返回一个新函数，新函数不会立即执行而是到了引用时再执行 , 惰性序列也是同理，如果你不主动遍历它，他就不会计算其中元素的值，只是保留一个用户输入的表达式。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">m_g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        num <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            <span class="token keyword">yield</span> num <span class="token operator">+</span> <span class="token number">1</span>
    
    it <span class="token operator">=</span> m_g<span class="token punctuation">(</span><span class="token punctuation">)</span> 

    res <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">*</span>x <span class="token punctuation">,</span> it<span class="token punctuation">)</span> <span class="token comment"># 生成器可以被无限迭代 ，但由于map是惰性序列，程序只保留这个式子而不执行，程序正常结束</span>
    <span class="token comment"># print(list(res)) # 访问了map，开始计算结果，因为生成器可以被无限迭代，因此无限循环 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>reduce</code> 允许我们传入两个参数，<code>reduce(处理函数,数组)</code>，处理函数比较像js中的sort函数，它一定接收两个函数，并将两者计算的结果return出去传给下一个元素，它实际上是这样的解构：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">reduce</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> x3<span class="token punctuation">)</span><span class="token punctuation">,</span> x4<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如求和函数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y

res <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment"># 6</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>filter(处理函数，序列)</code>,filter和map一样是 <strong>惰性序列</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">is_odd</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span>

<span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span>is_odd<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 结果: [1, 5, 9, 15]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),v={href:"https://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95/374984?fromtitle=%E5%9F%83%E6%8B%89%E6%89%98%E8%89%B2%E5%B0%BC%E7%AD%9B%E9%80%89%E6%B3%95&fromid=4524938",target:"_blank",rel:"noopener noreferrer"},b=a(`<ol><li>生成从2开始的自然数序列： 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...</li><li>下一个数字是2，2的倍数一定不是素数：用filter函数把2的倍数筛掉：3, <s>4</s>, 5, <s>6</s>, 7, <s>8</s>, 9, <s>10</s>, 11, <s>12</s>, 13, <s>14</s>, 15, <s>16</s>, 17, <s>18</s>, 19, <s>20</s>, ...</li><li>下一个数字是3，3的倍数一定不是素数：用filter函数把3的倍数筛掉：<s>4</s>, 5, <s>6</s>, 7, <s>8</s>, <s>9</s>, <s>10</s>, 11, <s>12</s>, 13, <s>14</s>, <s>15</s>, <s>16</s>, 17, <s>18</s>, 19, <s>20</s>, ...</li></ol><p>问题是，这个序列是无限的，我们要怎么去筛选一个无限序列呢？答案是<strong>生成器</strong>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">list_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 用迭代器生成无限序列</span>
        num <span class="token operator">=</span> <span class="token number">2</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            <span class="token keyword">yield</span> num 
            num <span class="token operator">+=</span> <span class="token number">1</span>

     <span class="token comment"># 高阶函数，返回一个新函数，新函数返回boolean值，让filter判断是否需要保留当前值</span>
    <span class="token keyword">def</span> <span class="token function">not_divisible</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> 
        <span class="token keyword">return</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">%</span> n <span class="token operator">!=</span> <span class="token number">0</span>  <span class="token comment"># 如果不是当前迭代到数字的倍数就保留   </span>
    
    <span class="token keyword">def</span> <span class="token function">primes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> <span class="token number">2</span>
        it <span class="token operator">=</span> list_queue<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 构造生成器</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            num <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
            <span class="token keyword">yield</span> num
            <span class="token comment"># 生成器是无限可迭代对象，它实际上是[2,3,4,5,....]无限序列</span>
            <span class="token comment"># filter生成的结果为惰性序列，不执行，不会导致死循环</span>
            <span class="token comment"># not_divisible将当前迭代到的数字的倍数从序列中筛除</span>
            it <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>not_divisible<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">,</span> it<span class="token punctuation">)</span>   

    <span class="token keyword">for</span> n <span class="token keyword">in</span> primes<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>
        <span class="token keyword">if</span>  n <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 取值时记得跳出无限序列</span>
            <span class="token keyword">break</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sorted函数" tabindex="-1"><a class="header-anchor" href="#sorted函数" aria-hidden="true">#</a> sorted函数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [-21, -12, 5, 9, 36]  默认从低到高</span>
<span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token builtin">abs</span><span class="token punctuation">)</span> <span class="token comment"># [5, 9, -12, -21, 36] 按绝对值大小排序</span>
<span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span> <span class="token punctuation">)</span> <span class="token comment">#  倒序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断变量类型" tabindex="-1"><a class="header-anchor" href="#判断变量类型" aria-hidden="true">#</a> 判断变量类型</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>
y <span class="token operator">=</span> <span class="token number">123</span>

<span class="token builtin">isinstance</span><span class="token punctuation">(</span>x <span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span>
<span class="token builtin">isinstance</span><span class="token punctuation">(</span>y <span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="求和函数" tabindex="-1"><a class="header-anchor" href="#求和函数" aria-hidden="true">#</a> 求和函数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="range" tabindex="-1"><a class="header-anchor" href="#range" aria-hidden="true">#</a> range</h3><p>因为Python 完完全全是一个面向对象的语言，它没有面向过程的for循环代码，如js中的 <code>for(let i = 0 ; i &lt; 3 ; i ++)</code> ，为了实现过程循环，我们需要一个 <code>range</code> 函数，它帮我们定义一个可迭代对象，可迭代对象是一个生成器，会不断抛出给定范围内的数字：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># range(0,3)</span>

<span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment"># 0,1,2</span>

<span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment"># 1,2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function g(h,y){const p=o("ExternalLinkIcon");return c(),l("div",null,[u,n("div",r,[d,n("p",null,[s("装饰器是如何实现的，详见"),n("a",k,[s("装饰器详解"),e(p)])])]),m,n("p",null,[s("来看一个有意思的例子,用"),n("a",v,[s("埃拉托斯特尼筛法"),e(p)]),s("求素数：")]),b])}const w=t(i,[["render",g],["__file","03.函数.html.vue"]]);export{w as default};
