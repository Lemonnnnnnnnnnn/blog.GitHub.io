import{_ as p,M as o,p as c,q as i,R as s,t as n,N as t,a1 as e}from"./framework-c8e009f3.js";const l={},r=e(`<h3 id="起步" tabindex="-1"><a class="header-anchor" href="#起步" aria-hidden="true">#</a> 起步</h3><p><code>Nodejs</code> 提供一组访问文件系统的操作API，可以这样引入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),u={class:"custom-container tip"},d=s("p",{class:"custom-container-title"},"TIP",-1),k={href:"http://nodejs.cn/api/fs.html#file-system",target:"_blank",rel:"noopener noreferrer"},v=s("strong",null,"不是教程",-1),g=s("strong",null,"函数的接收参数、返回值、 类的定义",-1),h={href:"https://www.runoob.com/nodejs/nodejs-fs.html",target:"_blank",rel:"noopener noreferrer"},f=e(`<h3 id="同步还是异步" tabindex="-1"><a class="header-anchor" href="#同步还是异步" aria-hidden="true">#</a> 同步还是异步？</h3><p>众所周知，nodejs以异步编程闻名。<code>fs</code> 同样为我们提供了异步和同步两种写法。同步方法写起来会更舒服，但异步方法性能更高（没有阻塞），请选择你喜欢的写法。</p><p>异步读取当前文件夹下的所有文件，使用方法 <a href="#%E8%AF%BB%E5%8F%96%E7%9B%AE%E5%BD%95">readdir</a>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;异步读取: &quot;</span> <span class="token operator">+</span> files<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同步读取：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;同步读取: &quot;</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，在异步方法中，我们可以从回调函数的第一个参数 <code>err</code> 中获取报错信息，那么同步方法呢？它会直接抛出错误，我们需要用 <code>try catch</code> 来捕获错误。我们用 <code>readdirSync</code> 来读取一个文件让程序报错：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token punctuation">,</span> <span class="token string">&#39;fs.js&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;同步读取: &quot;</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><h3 id="读取目录" tabindex="-1"><a class="header-anchor" href="#读取目录" aria-hidden="true">#</a> 读取目录</h3><h4 id="readdir" tabindex="-1"><a class="header-anchor" href="#readdir" aria-hidden="true">#</a> readdir</h4><p><strong>异步</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>
    path <span class="token punctuation">,</span>
    options<span class="token operator">&lt;</span>String <span class="token operator">|</span> Object<span class="token operator">&gt;</span><span class="token operator">?</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">encoding</span>  <span class="token operator">:</span> <span class="token function">String</span> <span class="token punctuation">(</span>默认<span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">withFileTypes</span> <span class="token operator">:</span> boolean
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>err <span class="token punctuation">,</span> files <span class="token operator">&lt;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token punctuation">[</span>fs<span class="token punctuation">.</span>Dirent<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>#fs<span class="token punctuation">.</span>Dirent<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>path</strong> : 提供的文件夹文件，你可以直接打印 <code>__dirname</code> 来查看当前的文件夹路径</li><li><strong>options</strong> : 可选项，可以是<strong>字符串，对象</strong>， <ul><li>字符串：encoding编码</li><li>对象： 如果将 <code>withFileTypes</code> 设为 <code>true</code> ，返回的结果会是 <a href="#fs.Dirent">fs.Dirent</a> 类型</li></ul></li><li><strong>callback</strong> ： 回调函数，<code>files</code> 为当前目录下的文件数组列表</li><li>返回： none</li></ul><p><strong>同步</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>
    path<span class="token punctuation">,</span>
    options
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回： &lt;string[]&gt; | &lt;<a href="#fs.Dirent">fs.Dirent[]</a>&gt;</p><h4 id="opendir" tabindex="-1"><a class="header-anchor" href="#opendir" aria-hidden="true">#</a> openDir</h4><p><strong>异步：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">opendir</span><span class="token punctuation">(</span>
    path<span class="token punctuation">,</span>
    options<span class="token operator">&lt;</span>String <span class="token operator">|</span> Object<span class="token operator">&gt;</span><span class="token operator">?</span><span class="token operator">:</span><span class="token punctuation">{</span>
        encoding <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">:</span>  默认<span class="token string">&#39;utf-8&#39;</span>， 编码
        bufferSize <span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">:</span> 默认 <span class="token number">32</span> ， 内存缓冲的目录条数
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>err <span class="token punctuation">,</span> <span class="token literal-property property">dir</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>fs<span class="token punctuation">.</span>Dir<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>#fs<span class="token punctuation">.</span>Dir<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>同步：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">opendirSync</span><span class="token punctuation">(</span>
    path <span class="token punctuation">,</span>
    options
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回 &lt;<a href="#fs.Dirent">fs.Dirent[]</a>&gt;</p><h3 id="读取文件" tabindex="-1"><a class="header-anchor" href="#读取文件" aria-hidden="true">#</a> 读取文件</h3><p>默认缓冲整个文件，为了加快读取速度，可以通过 <code>fs.createReadStream()</code> 进行流式传输。这样的话可以使用 <code>options</code> 中的 <code>signal</code>参数进行终止读取操作</p><h4 id="readfile" tabindex="-1"><a class="header-anchor" href="#readfile" aria-hidden="true">#</a> readFile</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>
    path <span class="token punctuation">,</span>
    options<span class="token operator">&lt;</span>String <span class="token operator">|</span> Object<span class="token operator">&gt;</span><span class="token operator">?</span><span class="token operator">:</span><span class="token punctuation">{</span> 
        <span class="token literal-property property">encoding</span>  <span class="token operator">:</span> <span class="token function">String</span> <span class="token punctuation">(</span>默认<span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        signal ： AbortSignal<span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token punctuation">,</span> 
    callback
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token punctuation">,</span> <span class="token string">&#39;path.js&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>files</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token comment">// console.log(files); // buffer二进制</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="class类" tabindex="-1"><a class="header-anchor" href="#class类" aria-hidden="true">#</a> Class类</h2><h3 id="fs-dirent" tabindex="-1"><a class="header-anchor" href="#fs-dirent" aria-hidden="true">#</a> fs.Dirent</h3><p>常见场景：通过<a href="#readdir">fs.readdir()</a> 或 <code>fs.readdirSync() </code>在 <code>withFileTypes</code> 选项设置为 <code>true</code> 的情况下调用时返回 <strong>dirent对象</strong>。</p><p>常用方法：</p><ul><li><strong>dirent.isDirectory()</strong> 是否是文件夹</li><li><strong>dirent.isFile()</strong> 是否是文件</li><li><strong>dirent.name</strong> 文件（夹）名字</li></ul><h3 id="fs-dir" tabindex="-1"><a class="header-anchor" href="#fs-dir" aria-hidden="true">#</a> fs.Dir</h3><p>常见场景：通过 <a href="#opendir">fs.opendir()</a>、<code>fs.opendirSync()</code> 或 <code>fsPromises.opendir()</code> 创建 <strong>dir对象</strong> 。</p><p>常用方法：</p><ul><li><strong>dir.readSync()</strong>： 同步读取下一个目录条目，返回<a href="#fs.Dirent">fs.Dirent</a>对象，若无下一个条目，返回null</li><li><strong>dir.read(callback(err, <a href="#fs.Dirent">fs.Dirent</a>))</strong> ： 相当于调用了 <code>dir.read()</code> 的 <code>.then()</code> 方法</li><li><strong>dir.read()</strong>： 返回Promise或null对象</li><li><strong>dir.close()</strong> : 关闭目录的 <a href="#FileHandle">FileHandle</a></li><li><strong>dir.path</strong> ： 路径</li><li><strong>dir<a href="">Symbol.asyncIterator</a></strong> ： 迭代器，对每一个dir对象调用 <code>dir.read()</code> 方法直到返回null</li></ul><h3 id="filehandle" tabindex="-1"><a class="header-anchor" href="#filehandle" aria-hidden="true">#</a> FileHandle</h3>`,38);function m(b,_){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,s("div",u,[d,s("p",null,[n("对于初学者来说不建议直接阅读"),s("a",k,[n("nodejs官方文档"),t(a)]),n("，因为官方文档 "),v,n(" ，严重缺乏使用用例，只是单纯的提供"),g,n("等等信息。")]),s("p",null,[n("本文参考的是"),s("a",h,[n("菜鸟教程"),t(a)]),n("，对新手比较友好。")])]),f])}const y=p(l,[["render",m],["__file","01.fs.html.vue"]]);export{y as default};
