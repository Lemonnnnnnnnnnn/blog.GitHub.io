import{_ as n,p as s,q as a,a1 as e}from"./framework-c8e009f3.js";const p={},t=e(`<h2 id="rtk-query" tabindex="-1"><a class="header-anchor" href="#rtk-query" aria-hidden="true">#</a> RTK Query</h2><p><code>Redux</code>团队推出的一个数据请求/缓存方案。包括以下内容</p><ul><li>跟踪<code>loading</code>状态，展示<code>spinner UI</code></li><li>避免分重复请求</li><li>优化UI相应速度</li><li>管理缓存</li></ul><p>从<code>Apollo Client, React Query, Urql, and SWR</code>等请求工具处获取了灵感，并添加了如下内容</p><ul><li>数据请求和缓存逻辑是基于<code>createSlice</code>和<code>createAsyncThunk</code>的</li><li>提供缓存数据生命周期（<code>cache entry lifecycle</code>）选项</li><li>API名称预定义（别名）</li></ul><p>具有如下方法：</p><ul><li><code>createApi()</code> : 定义API目录，描述如何获取<code>data</code></li><li><code>fetchBaseQuery()</code> : <code>fetch</code>的封装</li><li><code>ApiProvider()</code> : 同 react的Provider,如果你已经用了<code>Redux store</code>，则不需要它</li></ul><h2 id="createapi" tabindex="-1"><a class="header-anchor" href="#createapi" aria-hidden="true">#</a> createApi</h2><p><code>RTKQ(RTK Query)</code>的核心方法，它允许你定义一组<code>endpoints站点</code>来描述你如何获取数据。它由如下结构组成：</p><ul><li><strong>baseQuery</strong> : 定义主域名（如/api/）和基本查询方法。通过<code>fetchBaseQuery</code> helper 生成。</li><li><strong>endpoints</strong> : 详细描述域名下的各个路径（如/api/name/）分别匹配的查询方法。</li><li><strong>reducerPath</strong> : 可用于定义配置的<code>reducer</code>名称</li></ul><h4 id="fetchbasequery" tabindex="-1"><a class="header-anchor" href="#fetchbasequery" aria-hidden="true">#</a> fetchBaseQuery</h4><p><code>fetchBaseQuery</code>的基本结果如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">fetchBaseQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    baseUrl <span class="token operator">:</span> 请求的域名根地址<span class="token punctuation">,</span>
    prepareHeaders <span class="token operator">?</span><span class="token operator">:</span> 配置请求头<span class="token punctuation">,</span>
    paramsSerializer <span class="token operator">?</span><span class="token operator">:</span> 格式化参数<span class="token punctuation">,</span>
    fetchFn <span class="token operator">?</span><span class="token operator">:</span> 重写请求方法，ssr使用
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="endpoints" tabindex="-1"><a class="header-anchor" href="#endpoints" aria-hidden="true">#</a> endpoints</h4><p>每组路径接收一个回调函数<code>builder=&gt;{}</code>，函数内通过<code>builder.query</code>语法生成相应的详细查询方法。<code>builder.query</code>部分定义如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>build<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    query <span class="token operator">:</span> 请求配置（地址、参数等）<span class="token punctuation">,</span>
    transformResponse <span class="token operator">:</span> 格式化返回值<span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">onQueryStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> 请求完成时的操作<span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">onCacheEntryAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> 添加缓存时的操作
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>query部分定义:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    headers <span class="token operator">:</span> 首部
    url<span class="token operator">:</span> baseUrl后的地址
    params<span class="token operator">?</span><span class="token operator">:</span> 参数
    body<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
    responseHandler<span class="token operator">?</span><span class="token operator">:</span> 格式化返回值
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="react-hooks" tabindex="-1"><a class="header-anchor" href="#react-hooks" aria-hidden="true">#</a> react hooks</h2><p><code>RTKQ</code>会自动为每个<code>endpoints</code>生成一些<code>hooks</code>方法，如<code>getPost: builder.query()</code>将生成<code>useGetPostQuery</code>。结构为 <code>use(Endpoint_name)Query</code>。</p><p><code>useQuery</code>方法的调用会自动从<code>endpoint</code>获取数据。部分结构如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> useQueryResult <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">useGetPostsQuery</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> options<span class="token punctuation">)</span>

<span class="token keyword">type</span> <span class="token class-name">UseQueryResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  data<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token comment">// 最后一次使用该hooks获取的数据（不论参数arg是否相同）</span>
  error<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">unknown</span> 
  isLoading<span class="token operator">:</span> <span class="token builtin">boolean</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2><p>用<code>createApi</code> 生成一个<code>APi slice</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApi<span class="token punctuation">,</span> fetchBaseQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit/query/react&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> animeApi <span class="token operator">=</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">reducerPath</span><span class="token operator">:</span> <span class="token string">&#39;animeApi&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">baseQuery</span><span class="token operator">:</span> <span class="token function">fetchBaseQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&#39;https://api.waifu.im/&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">endpoints</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">builder</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// endpoints自动生成hooks（action），用于View层调用</span>
        <span class="token literal-property property">getAnimeInfo</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 
            <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/info&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">images</span><span class="token operator">:</span> id <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 自动生成hooks的名称为\`use(Endpoint_name)Query\`</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> useGetAnimeInfoQuery <span class="token punctuation">}</span> <span class="token operator">=</span> animeApi

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将<code>Api slice</code>整合进<code>store</code>中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> animeApi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./service&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">reducer</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>animeApi<span class="token punctuation">.</span>reducerPath<span class="token punctuation">]</span> <span class="token operator">:</span> animeApi<span class="token punctuation">.</span>reducer
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引入<code>Api slice</code>自动生成的<code>hooks</code>，请求数据并渲染</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useGetAnimeInfoQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./service&#39;</span>


<span class="token keyword">function</span> <span class="token function">Anime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token string">&#39;28884aff8b33732a&#39;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> isLoading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetAnimeInfoQuery</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>loading <span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>error<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tags<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>description<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>Anime <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),o=[t];function c(i,l){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","20.rtk-query基本使用.html.vue"]]);export{u as default};
