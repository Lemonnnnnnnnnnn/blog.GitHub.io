import{_ as d,M as c,p as o,q as s,R as e,t as a,N as i,a1 as t}from"./framework-c8e009f3.js";const r={},l=t(`<h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h2><h3 id="声明" tabindex="-1"><a class="header-anchor" href="#声明" aria-hidden="true">#</a> 声明</h3><ul><li><code>local 【变量1 变量2】</code> ：声明变量</li><li><code>【函数名】(){}</code> ：声明函数</li></ul><h3 id="if语句" tabindex="-1"><a class="header-anchor" href="#if语句" aria-hidden="true">#</a> if语句</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>条件<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token punctuation">..</span>.
	<span class="token builtin class-name">return</span> <span class="token number">0</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="complete" tabindex="-1"><a class="header-anchor" href="#complete" aria-hidden="true">#</a> complete</h3><p><code>complete -F【函数名】【文件名】</code>： 将函数和本文件绑定在一起。</p><h3 id="与括号" tabindex="-1"><a class="header-anchor" href="#与括号" aria-hidden="true">#</a> $与括号</h3><ul><li><code>\${}</code>用作变量替换。</li><li><code>$()</code> ：用于执行命令，如：<code>$(dirname $0)</code>；</li></ul><h2 id="管道" tabindex="-1"><a class="header-anchor" href="#管道" aria-hidden="true">#</a> 管道|</h2><h3 id="如何执行多条命令" tabindex="-1"><a class="header-anchor" href="#如何执行多条命令" aria-hidden="true">#</a> 如何执行多条命令？</h3><p>简单的顺序指令可以通过 ;来实现：<code>command1;command2;command3;</code> 。</p><p>有条件的执行多条命令： <code>command1 &amp;&amp; command2 || command3</code> 。 意思是 <code>command1</code> 成功才执行 <code>command2</code> ， <code>command2</code> 失败才执行 <code>command3</code> 。</p><h3 id="管道-和-有什么不同" tabindex="-1"><a class="header-anchor" href="#管道-和-有什么不同" aria-hidden="true">#</a> 管道|和;有什么不同？</h3><p>管道会将前一个命令的输出作为后一个命令的输入。</p><p>例如：<code>dpkg -l | grep -i [软件包名]</code>。</p><ul><li><code>dekg -l</code> ：<code>l</code> 表示 <code>list</code>，命令输出已安装软件包列表。</li><li><code>grep -i</code> : <code>i</code> 表示 <code>ignore-case</code> 忽略大小写，可以将匹配的行打印出来。</li></ul>`,17),h={class:"custom-container tip"},p=e("p",{class:"custom-container-title"},"TIP",-1),u={href:"/server/01.linux/10.%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html#grep",target:"_blank",rel:"noopener noreferrer"},m=e("h2",{id:"使用例子",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用例子","aria-hidden":"true"},"#"),a(" 使用例子")],-1),_=e("h3",{id:"生成序列用于批量操作",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#生成序列用于批量操作","aria-hidden":"true"},"#"),a(" 生成序列用于批量操作")],-1),b=e("p",null,[e("code",null,"mkdir -p 2019/{01..12}/{baby,photo}"),a(" ： 表示在每个月份的目录下又分别创建了baby 和 photo 两个子目录。")],-1);function f(k,x){const n=c("ExternalLinkIcon");return o(),s("div",null,[l,e("div",h,[p,e("p",null,[a("输出结果是按行展示的纯文本，"),e("a",u,[a("grep"),i(n)]),a("也是搜索纯文本。")])]),m,_,b])}const g=d(r,[["render",f],["__file","50.bash脚本.html.vue"]]);export{g as default};
