import{_ as p,M as c,p as o,q as l,R as a,t as n,N as t,a1 as s}from"./framework-c8e009f3.js";const i={},r=s('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><blockquote><p>Maven 是一个 Java 项目管理和构建工具，它可以定义项目结构、项目依赖，并使用统一的方式进行自动化构建，是 Java 项目不可缺少的工具。缩写是 <code>mvn</code> 。</p></blockquote><p>它的主要功能由：</p><ul><li>提供了一套标准化的项目结构；</li><li>提供了一套标准化的构建流程（编译，测试，打包，发布……）；</li><li>提供了一套依赖管理机制。</li></ul><h2 id="依赖包管理" tabindex="-1"><a class="header-anchor" href="#依赖包管理" aria-hidden="true">#</a> 依赖包管理</h2><p>以往，为了引入第三方 jar 包，我们需要手动将依赖包的路径存入 <code>classpath</code> 中，或是在运行时声明 classpath . 在 maven 中，我们通过配置 <code>pom.xml</code> 文件来管理依赖。</p><h2 id="如何搜索第三方组件" tabindex="-1"><a class="header-anchor" href="#如何搜索第三方组件" aria-hidden="true">#</a> 如何搜索第三方组件</h2>',7),d={href:"https://search.maven.org/",target:"_blank",rel:"noopener noreferrer"},u=s(`<h2 id="maven-生命周期" tabindex="-1"><a class="header-anchor" href="#maven-生命周期" aria-hidden="true">#</a> maven 生命周期</h2><ul><li>validate</li><li>initialize</li><li>generate-sources</li><li>process-sources</li><li>generate-resources</li><li>process-resources</li><li>compile</li><li>process-classes</li><li>generate-test-sources</li><li>process-test-sources</li><li>generate-test-resources</li><li>process-test-resources</li><li>test-compile</li><li>process-test-classes</li><li>test</li><li>prepare-package</li><li>package</li><li>pre-integration-test</li><li>integration-test</li><li>post-integration-test</li><li>verify</li><li>install</li><li>deploy</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>生命周期的每个阶段被称为 <code>phase</code></p><p>每个阶段的工作内容被称为 <code>goal</code>，比如 <code>compile</code>阶段的 goal 是 <code>compiler:testCompile</code> ；通过插件 <code>plugin</code> 完成</p></div><h2 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行" aria-hidden="true">#</a> 命令行</h2><ul><li><code>mvn clean</code> : 清理所有生成的 class 和 jar 文件</li><li><code>mvn clean compile</code> : 先清理，再执行到 <code>compile</code></li><li><code>mvn clean package</code> : 先清理，再执行到 <code>package</code></li></ul><h2 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释" aria-hidden="true">#</a> 名词解释</h2><ul><li><strong>mvn ：</strong> ： <code>Maven</code> 缩写</li><li><strong>mvnw :</strong> <code>mvnw</code> 是 <code>Maven Wrapper</code> 的缩写，可以为固定项目指定一个 mvn 版本，他包裹项目避免使用全局的 mvn 版本，名字中的 <code>wrapper</code> 由此而来。</li><li><strong>archetype :</strong> <code>archetype</code> 意思是原型，它可以生成 maven 初始项目 。全称 <code>Maven&#39;s archetype mechanism</code> ：maven 原型机制。</li><li><strong>groupId :</strong> 类似包名，通常是公司或组织名称</li><li><strong>artifactId :</strong> : 类似类名，通常是项目名称</li><li><strong>version :</strong> : 项目版本</li></ul><h2 id="配置案例云仓库" tabindex="-1"><a class="header-anchor" href="#配置案例云仓库" aria-hidden="true">#</a> 配置案例云仓库</h2><p>把下面的配置复制到 <code>%MAVEN_HOME%/conf/setting.xml</code> 里面，<code>&lt;/mirrors&gt;</code> 节点内配置</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建基础项目" tabindex="-1"><a class="header-anchor" href="#创建基础项目" aria-hidden="true">#</a> 创建基础项目</h2><p>自动创建文件夹名为 <code>my-app</code> 的项目。配置如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn <span class="token parameter variable">-B</span> archetype:generate <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>com.mycompany.app <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>my-app <span class="token parameter variable">-DarchetypeArtifactId</span><span class="token operator">=</span>maven-archetype-quickstart <span class="token parameter variable">-DarchetypeVersion</span><span class="token operator">=</span><span class="token number">1.4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>不要使用 powsershell 运行以上命令，用** cmd**</p></div>`,14),m=a("strong",null,"空格或冒号",-1),v={href:"https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_parameters?view=powershell-7.2",target:"_blank",rel:"noopener noreferrer"},k=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-<span class="token operator">&lt;</span>parameter_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>parameter_value<span class="token operator">&gt;</span>
-<span class="token operator">&lt;</span>parameter_name<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>parameter_value<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DarchetypeArtifactId </code> 和 <code>DarchetypeVersion</code> 指明拉取模板的名称和版本。<code>DgroupId</code> 和 <code>DartifactId</code> 指明 pom.xml 的配置信息和文件夹结构，以下是文件夹结构：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>D:.
│  pom.xml
│
├─src
│  ├─main
│  │  └─java
│  │      └─com
│  │          └─mycompany
│  │              └─app
│  │                      App.java
│  │
│  └─test
│      └─java
│          └─com
│              └─mycompany
│                  └─app
│                          AppTest.java
│
└─target
    ├─classes
    │  └─com
    │      └─mycompany
    │          └─app
    │                  App.class
    │
    └─test-classes
        └─com
            └─mycompany
                └─app
                        AppTest.class
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加第三方库" tabindex="-1"><a class="header-anchor" href="#添加第三方库" aria-hidden="true">#</a> 添加第三方库</h2>`,4),g=a("code",null,"commons-logging",-1),h={href:"https://search.maven.org/",target:"_blank",rel:"noopener noreferrer"},b=s(`<p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220624105553.png" alt=""></p><p>添加依赖信息到 <code>pom.xml</code> 文件中：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像之前一样引入第三方库的包并调用执行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mycompany<span class="token punctuation">.</span>app</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Log</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">LogFactory</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Hello world!
 *
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;start...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;end.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="打包" tabindex="-1"><a class="header-anchor" href="#打包" aria-hidden="true">#</a> 打包</h4><p>通过<code>mvn clean package</code> 可以在 <code>target</code> 目录下生成打包好的 jar 包。</p><h4 id="vscode-直接运行" tabindex="-1"><a class="header-anchor" href="#vscode-直接运行" aria-hidden="true">#</a> vscode 直接运行</h4><p>通过<code>Debugger for Java</code> 或者 <code>Test Runner for Java</code> 插件可以直接运行 main 函数</p><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220624115315.png" alt=""></p>`,10);function y(f,_){const e=c("ExternalLinkIcon");return o(),l("div",null,[r,a("p",null,[a("a",d,[n("https://search.maven.org/"),t(e)])]),u,a("p",null,[n("原因是在 powershell 中参数并不是以等号来传递的，而是 "),m,n(","),a("a",v,[n("详见"),t(e)]),n("：")]),k,a("p",null,[n("假如我们想引入第三方包"),g,n(", 我们需要先进入 "),a("a",h,[n("https://search.maven.org/"),t(e)]),n(" 网址搜索目标库。")]),b])}const w=p(i,[["render",y],["__file","170.maven.html.vue"]]);export{w as default};
