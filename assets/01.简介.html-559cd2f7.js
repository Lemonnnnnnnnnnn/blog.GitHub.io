import{_ as t,M as o,p as c,q as d,R as e,t as a,N as r,a1 as n}from"./framework-c8e009f3.js";const i={},p=e("h2",{id:"原则",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#原则","aria-hidden":"true"},"#"),a(" 原则")],-1),l=n("<li>单一数据源</li><li><code>state</code>只读，只能通过 <code>dispatch action</code>修改, <code>新state</code>必须是全新的对象，而非在原来的对象上做修改<code>（state.xxx = xxx）</code>。(可由<code>immer</code>解决，原理是使用<code>Proxy</code>)。</li>",2),u=e("code",null,"reducer",-1),h={href:"/react/Redux/05.redux-thunk.html",target:"_blank",rel:"noopener noreferrer"},k=e("li",null,[e("code",null,"action"),a("只能是扁平对象")],-1),v=n(`<p>目的：保证数据的<strong>可预测性</strong>。</p><h2 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程" aria-hidden="true">#</a> 工作流程</h2><p><strong>初始化</strong></p><ol><li>用 <code>root reducer</code>创建 <code>redux store</code>, 初始化 <code>state</code></li><li>初始化渲染UI并订阅 <code>redux store</code>———— <code>redux store</code>数据改变通知订阅者</li></ol><p><strong>更新</strong></p><ol><li>ui层 <code>dispatch action</code></li><li><code>reducer</code>处理，生成新state</li><li><code>store</code>通知订阅者更新视图</li></ol><h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语" aria-hidden="true">#</a> 术语</h2><h4 id="action" tabindex="-1"><a class="header-anchor" href="#action" aria-hidden="true">#</a> Action</h4><p>通知对象，通过<code>dispatch</code>发送通知给<code>reducer</code>来处理<code>state</code>更新变化，通常是由<code>payload</code>和<code>type</code>组成的简单对象，例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> addTodoAction <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;todos/todoAdded&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token string">&#39;Buy milk&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="reducer" tabindex="-1"><a class="header-anchor" href="#reducer" aria-hidden="true">#</a> Reducer</h4><p>一个函数，接收<code>action</code>，结合<code>action</code>和旧的<code>state</code>生成新<code>state</code>的地方，名字来源于<code>JavaScript的 Array.reduce()</code>，例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">counterReducer</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 检查 reducer 是否关心这个 action</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;counter/increment&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果是，复制 \`state\`</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>state<span class="token punctuation">,</span>
      <span class="token comment">// 使用新值更新 state 副本</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> state<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 返回原来的 state 不变</span>
  <span class="token keyword">return</span> state
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="store" tabindex="-1"><a class="header-anchor" href="#store" aria-hidden="true">#</a> Store</h4><p>全局状态库，通过传入<code>reducer</code>来创建，提供<code>dispatch</code>方法</p><h4 id="dispatch" tabindex="-1"><a class="header-anchor" href="#dispatch" aria-hidden="true">#</a> Dispatch</h4><p>通知方法，通过<code>store.dispatch(action)</code>，来发送通知，是改变Store的唯一方式。</p><h4 id="selector" tabindex="-1"><a class="header-anchor" href="#selector" aria-hidden="true">#</a> Selector</h4><p>取值函数，取Store中的某个值</p><h4 id="slice" tabindex="-1"><a class="header-anchor" href="#slice" aria-hidden="true">#</a> Slice</h4><p><code>reducer</code>的包装器，自动生成相关<code>Action</code></p><h4 id="thunk" tabindex="-1"><a class="header-anchor" href="#thunk" aria-hidden="true">#</a> Thunk</h4><p><code>reducer</code>禁止任何异步逻辑，这在发送请求数据的<code>dispatch</code>时是相当不利的，<code>thunk</code>是一个有关<strong>异步逻辑</strong>的解决方案。</p>`,23);function m(b,_){const s=o("ExternalLinkIcon");return c(),d("div",null,[p,e("ul",null,[l,e("li",null,[u,a("只能是纯函数，异步逻辑由"),e("a",h,[a("thunk"),r(s)]),a("完成")]),k]),v])}const f=t(i,[["render",m],["__file","01.简介.html.vue"]]);export{f as default};
