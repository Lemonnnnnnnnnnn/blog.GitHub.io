import{_ as i,M as l,p as o,q as c,R as n,t as s,N as e,a1 as t}from"./framework-c8e009f3.js";const r={},p=t(`<h1 id="_10-如何用shell脚本签出固定的git分支" tabindex="-1"><a class="header-anchor" href="#_10-如何用shell脚本签出固定的git分支" aria-hidden="true">#</a> 10.如何用shell脚本签出固定的git分支？</h1><p>假设我们想要签出git的第一次提交分支，我们可以使用如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>

<span class="token function-name function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token assign-left variable">branch</span><span class="token operator">=</span>refs/heads/master
	<span class="token function">git</span> log <span class="token parameter variable">--reverse</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>%H <span class="token variable">$branch</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-1</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">git</span> checkout 
<span class="token punctuation">}</span>
first
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该命令的具体功能是输出 <em>git</em> 日志中的第一条记录的哈希值，并将其作为参数传递给 <code>git checkout</code> 命令.</p><ul><li><code>branch = refs/heads/master</code> 设置变量 <em>branch</em> 表示当前所在分支</li><li><code>git log --reverse --pretty=%H $branch</code> ： <ul><li><code>git log</code> : 打印 <em>git</em> 日志</li><li><code>--reverse</code> : 按反向打印</li><li><code>--pretty=%H</code> : 格式化日记结果为只打印哈希值</li><li><code>$branch</code> ：打印当前分支上的日志</li></ul></li><li><code>|</code> ： 连接符</li><li><code>head -1</code> 只显示第一条结果</li><li><code>xargs</code> : 将标准输入数据转化为命令行参数并传递给后面的命令</li></ul><hr><p>如果我们想要签出当前git分支的下一次提交记录的分支，可以使用如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># git-next</span>

<span class="token function-name function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token assign-left variable">branch</span><span class="token operator">=</span>refs/heads/master
	<span class="token function">git</span> log <span class="token parameter variable">--reverse</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>%H <span class="token variable">$branch</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-A</span> <span class="token number">1</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> rev-parse HEAD<span class="token variable">)</span></span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-1</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">git</span> checkout
<span class="token punctuation">}</span>
next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该命令和上面的命令相比，只多了使用 <em>grep</em> 命令来查询下一个目标分支的代码。</p>`,9),d=n("li",null,[n("code",null,"grep -A 1 "),s(" : 搜索结果显示匹配行和"),n("strong",null,"匹配行之后的行数"),s(" ， 因此实际上如果有匹配项则会输出两行。")],-1),u=n("code",null,"$(git rev-parse HEAD)",-1),v={href:"/server/01.linux/10.%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"git rev-parse HEAD",-1),h={href:"https://stackoverflow.com/questions/15798862/what-does-git-rev-parse-do",target:"_blank",rel:"noopener noreferrer"},b=n("em",null,"HEAD",-1),k=n("code",null,"grep",-1),g=n("em",null,"HEAD",-1),f=n("li",null,[n("code",null,"tail -1"),s(" : 前面查询出了两行，这里选择两行中的最后与1行，即当前分支的下一次 "),n("em",null,"git"),s(" 提交分支")],-1),_=t(`<h1 id="执行" tabindex="-1"><a class="header-anchor" href="#执行" aria-hidden="true">#</a> 执行</h1><p>进入 <code>git</code> 仓库所在目录后，执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> first.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>键入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function-name function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token assign-left variable">branch</span><span class="token operator">=</span>refs/heads/master
	<span class="token function">git</span> log <span class="token parameter variable">--reverse</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>%H <span class="token variable">$branch</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-1</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">git</span> checkout 
<span class="token punctuation">}</span>
first
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 first.sh 的权限设置为可执行文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>chomd u+x ./first.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),x=n("em",null,"first.sh",-1),y={href:"/server/01.linux/10.%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html",target:"_blank",rel:"noopener noreferrer"},E=t(`<p>执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./first.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Note: switching to <span class="token string">&#39;caee202320d1ab54f092506feba716788f696569&#39;</span><span class="token builtin class-name">.</span>

You are <span class="token keyword">in</span> <span class="token string">&#39;detached HEAD&#39;</span> state. You can <span class="token function">look</span> around, <span class="token function">make</span> experimental
changes and commit them, and you can discard any commits you <span class="token function">make</span> <span class="token keyword">in</span> this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
<span class="token keyword">do</span> so <span class="token punctuation">(</span>now or later<span class="token punctuation">)</span> by using <span class="token parameter variable">-c</span> with the switch command. Example:

  <span class="token function">git</span> switch <span class="token parameter variable">-c</span> <span class="token operator">&lt;</span>new-branch-name<span class="token operator">&gt;</span>

Or undo this operation with:

  <span class="token function">git</span> switch -

Turn off this advice by setting config variable advice.detachedHead to <span class="token boolean">false</span>

HEAD is now at caee202 init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表示已经切换到了废弃的分支上。切换到下一个分支也是同理，在此不再进行演示。</p><hr>`,6),w={href:"https://hutusi.com/articles/git-paging",target:"_blank",rel:"noopener noreferrer"};function A(H,B){const a=l("ExternalLinkIcon");return o(),c("div",null,[p,n("ul",null,[d,n("li",null,[u,s(" : "),n("a",v,[s("$()"),e(a)]),s("用于执行括号内的命令，这里通过 "),m,s(),n("a",h,[s("用于打印 "),b,s(" 分支的哈希值 "),e(a)]),s(". 合起来的意思是 "),k,s(" 查询 "),g,s(" 分支的哈希值")]),f]),_,n("p",null,[s("表示将 "),x,s(" 文件的权限设置为只有文件的拥有者对其拥有执行或切换权限."),n("a",y,[s("详见"),e(a)])]),E,n("p",null,[s("相关文章： "),n("a",w,[s("阅读开源代码小技巧"),e(a)])])])}const $=i(r,[["render",A],["__file","200.如何用shell脚本签出固定的git分支？.html.vue"]]);export{$ as default};
