import{_ as o,M as p,p as c,q as l,R as n,t as s,N as t,a1 as e}from"./framework-c8e009f3.js";const i={},u=n("h2",{id:"简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),s(" 简介")],-1),r=n("p",null,[n("code",null,"recoil"),s("是一个状态管理工具，意图配合react18新特性("),n("strong",null,"并行模式"),s(")，主打一个"),n("strong",null,"类hooks"),s("的写法，弥补react官方在状态管理上的不足。")],-1),k={class:"custom-container tip"},d=n("p",{class:"custom-container-title"},"TIP",-1),v=n("code",null,"recoil",-1),m=n("code",null,"react18",-1),b={href:"/react/react16-react18/20.Transition.html/",target:"_blank",rel:"noopener noreferrer"},f={href:"/react/react16-react18/60.suspense.html",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"recoil",-1),y=e(`<h3 id="atom" tabindex="-1"><a class="header-anchor" href="#atom" aria-hidden="true">#</a> atom</h3><p>它是状态的单位，可以使用<code>atom</code>直接替代组件内部的state，多个组件可以使用同一个<code>atom</code>，这意味着这些组件共享着同一个状态。</p><p>我们要做的，只是将<code>useState</code>改写一下罢了</p><p><strong>useState：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">const</span> <span class="token punctuation">[</span>fontSize <span class="token punctuation">,</span> setFontSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>recoil</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>      <span class="token keyword">const</span> fontSizeState <span class="token operator">=</span> <span class="token function">atom</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;fontSizeState&quot;</span><span class="token punctuation">,</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>fontSize<span class="token punctuation">,</span> setFontSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useRecoilState</span><span class="token punctuation">(</span>fontSizeState<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>useRecoilValue</code>用于获取<code>atom或selector</code>的状态</p></div><p>我们使用官方的示例来快速理解<code>atom</code>,点击放大按钮 -&gt; 修改状态 -&gt; 更改视图:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> atom<span class="token punctuation">,</span> useRecoilState <span class="token punctuation">,</span> RecoilRoot <span class="token punctuation">,</span> useRecoilValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;recoil&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>


<span class="token keyword">const</span> fontSizeState <span class="token operator">=</span> <span class="token function">atom</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;fontSizeState&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 必须是string</span>
  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">FontButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>fontSize<span class="token punctuation">,</span> setFontSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useRecoilState</span><span class="token punctuation">(</span>fontSizeState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取atom状态和修改方法</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>button
      onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontSize <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token operator">&gt;</span>
      Click to Enlarge
    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fontSize <span class="token operator">=</span> <span class="token function">useRecoilValue</span><span class="token punctuation">(</span>fontSizeState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果我们不用修改atom状态，可以用useRecoilValue来替代useRecoilState</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontSize <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>This text will increase <span class="token keyword">in</span> size too<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">Atom</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>RecoilRoot<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>FontButton <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>Text <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>RecoilRoot<span class="token operator">&gt;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> Atom<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="selector" tabindex="-1"><a class="header-anchor" href="#selector" aria-hidden="true">#</a> Selector</h3><p>对于<code>Selector</code> , 你可以直接把他看作是<code>Vue的computed</code>，它接受一个<code>atom</code>或者其他<code>selector</code>，用于计算<strong>state的派生数据</strong></p><p>官方的实例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> atom<span class="token punctuation">,</span> useRecoilValue<span class="token punctuation">,</span> selector <span class="token punctuation">,</span> useRecoilState <span class="token punctuation">,</span> RecoilRoot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;recoil&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fontSizeState <span class="token operator">=</span> <span class="token function">atom</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;fontSizeState&quot;</span><span class="token punctuation">,</span>
  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fontSizeLabelState <span class="token operator">=</span> <span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;fontSizeLabelState&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> get <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> fontSize <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>fontSizeState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问了fontSizeState , 创建了与fontSizeStated的依赖关系</span>
    <span class="token keyword">const</span> unit <span class="token operator">=</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fontSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>unit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">FontButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fontSizeLabel <span class="token operator">=</span> <span class="token function">useRecoilValue</span><span class="token punctuation">(</span>fontSizeLabelState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//计算依赖值</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>fontSize<span class="token punctuation">,</span> setFontSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useRecoilState</span><span class="token punctuation">(</span>fontSizeState<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>current font size <span class="token operator">:</span> <span class="token punctuation">{</span>fontSizeLabel<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button
          onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">size</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontSize <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token operator">&gt;</span>
        Click to Enlarge
      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Selector</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>RecoilRoot<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>FontButton <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>RecoilRoot<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Selector<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>get</code> == <code>useRecoilValue</code></p></div><h2 id="loadable" tabindex="-1"><a class="header-anchor" href="#loadable" aria-hidden="true">#</a> Loadable</h2><p><code>Loadable</code>表示<code>atom</code>和<code>selector</code>的当前状态，是一个<code>Object对象</code>，结构如下：</p><ul><li><code>state</code> : 当前状态，值为<code>hasValue || hasError || loading</code></li><li><code>contents</code> : 当前值，根据<code>state</code>的状态不同，返回不同值 <ul><li><code>hasValue</code> : value值</li><li><code>hasError</code> : error值</li><li><code>loading</code> : <code>contents.toPromise()</code> 返回 Promise对象</li></ul></li></ul><p>你可以通过<code>useRecoilValueLoadable</code>获取一个<code>Loadable</code>状态，并根据不同状态渲染不同内容。</p>`,19),h={href:"/react/react16-react18/60.suspense.html#%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"},S=e(`<p>使用例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> RecoilRoot<span class="token punctuation">,</span> selector<span class="token punctuation">,</span> useRecoilValueLoadable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;recoil&#39;</span>

<span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;userInfo&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/user?id=1</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">UserInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token function">useRecoilValueLoadable</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&#39;hasValue&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>info<span class="token punctuation">.</span>contents<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;hasError&#39;</span><span class="token operator">:</span>
            <span class="token keyword">throw</span> info<span class="token punctuation">.</span>contents
        <span class="token keyword">case</span> <span class="token string">&#39;loading&#39;</span><span class="token operator">:</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">toPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>loading <span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>RecoilRoot<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>UserInfo <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>RecoilRoot<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="atom-selector-与-loadable" tabindex="-1"><a class="header-anchor" href="#atom-selector-与-loadable" aria-hidden="true">#</a> atom/selector 与 Loadable</h4>`,3),w=n("code",null,"Loadable",-1),_={href:"/react/SWR/00.%E7%AE%80%E4%BB%8B.html",target:"_blank",rel:"noopener noreferrer"},z=n("strong",null,"不会throw promise来阻止渲染",-1),R=n("li",null,[s("获取"),n("code",null,"atom/selector"),s("状态是"),n("strong",null,"同步"),s("方法，只有在"),n("code",null,"fullfill"),s("状态下才会继续向下执行，若请求未完成，其会"),n("code",null,"throw Promise"),s("给"),n("code",null,"Suspense"),s("对象来加载loading状态。")],-1);function x(E,V){const a=p("ExternalLinkIcon");return c(),l("div",null,[u,r,n("div",k,[d,n("p",null,[s("强烈建议在学习"),v,s("之前先学习"),m,s("的相关特性，如"),n("a",b,[s("Transition"),t(a)]),s("和"),n("a",f,[s("suspense"),t(a)]),s("，他们有利于你了解"),g,s("功能的实现原理。否则你后续可能经常会有“为什么要这么写”的疑惑。")])]),y,n("p",null,[s("功能和"),n("a",h,[s("手动实现Suspense"),t(a)]),s("类似")]),S,n("ul",null,[n("li",null,[w,s("的写法类似于 "),n("a",_,[s("SWR"),t(a)]),s(" ， 它"),z,s("，而是获得一个实时更新的状态。随着状态更新渲染不同视图")]),R])])}const q=o(i,[["render",x],["__file","01.入门.html.vue"]]);export{q as default};
