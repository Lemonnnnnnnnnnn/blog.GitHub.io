import{_ as n,p as s,q as a,a1 as t}from"./framework-c8e009f3.js";const p={},o=t(`<h2 id="什么是debounce" tabindex="-1"><a class="header-anchor" href="#什么是debounce" aria-hidden="true">#</a> 什么是debounce</h2><p>直译为&quot;防抖&quot;，解决 <strong>页面DOM快速变动时的不舒适的UI快速切换</strong>。最简单的防抖函数原理就是：<strong>在很短的一段时间内连续执行多个相同的函数时，只执行最后一个函数</strong></p><p>一个最常见的场景就是输入框。想象你在使用搜索引擎，你快速连续的输入一段字符串，每输入字符串会发出一个请求获取候选列表：</p><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/debounce.gif" alt=""></p><p>事实上，如果候选列表非常庞大，或者将要渲染的UI十分昂贵时，灾难就会发生，画面会快速抖动或是交互无法及时渲染：</p><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/transition.gif" alt=""></p><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><p><strong>lodash.debounce</strong>定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token punctuation">[</span>wait<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>options<span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>func (Function): 要防抖动的函数。</li><li>[wait=0] (number): 需要延迟的毫秒数。</li><li>[options=] (Object): 选项对象。</li><li>[options.leading=false] (boolean): 指定在延迟开始前调用。</li><li>[options.maxWait] (number): 设置 func 允许被延迟的最大值。</li><li>[options.trailing=true] (boolean): 指定在延迟结束后调用。</li></ol><p>使用方法：用 <code>debounce</code> 包裹我们要执行的函数并获得一个新的防抖函数————你简单调用它就好，不用做任何事。拿我们写的一个例子说明，它具有如下功能：</p><p>如果两秒内，用户多次输入（执行函数），前一个函数会被取消并重新开始计时两秒：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">basic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> beginTime <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">inputValue</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;input value is &#39;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> overTime <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始时间和结束时间相差&#39;</span><span class="token punctuation">,</span> <span class="token function">moment</span><span class="token punctuation">(</span>overTime <span class="token operator">-</span> beginTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;秒&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// const input = debounce(inputValue, 2000, { leading: false, trailing: true }) // 默认配置，延迟后执行。延迟时间内只有最后一个请求有效。常用场景：输入input框进行模糊请求查找</span>
    <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>

    <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ，若无后续调用，开始时间和结束时间相差02秒</span>

    <span class="token comment">// 多次调用，前面的请求会执行click.cancel()方法并将计时器清0</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 开始时间和结束时间相差03秒</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也许你会疑问，如果用户不停点击，那么计时器难道会一直清零下去吗，函数永远得不到执行？ 是的。所以我们需要使用 <code>options.maxWait</code> 方法，如果最大等待时间到了，直接执行最后一个函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">maxWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> beginTime <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">inputValue</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;input value is &#39;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> overTime <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始时间和结束时间相差&#39;</span><span class="token punctuation">,</span> <span class="token function">moment</span><span class="token punctuation">(</span>overTime <span class="token operator">-</span> beginTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;秒&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">maxWait</span><span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// 开始时间和结束时间相差02秒</span>
        <span class="token comment">// 执行过程： 计时器重新计时，计时1秒，到达maxWait上限，停止等待</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设你正在搜索，你敲击了确认键，还要等待节流时间吗？这显然不合理。因此 <code>debounce</code>包裹后的函数提供了两个方法：<code>flush</code> 立即执行, <code>cancel</code> 取消执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">inputValue</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;input value is &#39;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>

    <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// input.flush() // 找到之前调用的debounceFunc函数，并立即执行</span>
    input<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 找到之前调用的debounceFunc函数，并停止执行</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有时我们会希望直接执行第一个函数，而取消后续函数的执行————一个经典的例子就是表单提交（你不用提交最后一份表单，他们的数据都是一样的，但你要保证用户不会连续点击导致多份相同数据的表单重复提交）。 我们可以将 debounce函数的配置选项 <code>options.leading</code> 设为true，它指定函数会在延迟开始前调用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">leading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> beginTime <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">clickBtn</span><span class="token punctuation">(</span>str <span class="token operator">=</span> <span class="token string">&#39;debounce&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> overTime <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始时间和结束时间相差&#39;</span><span class="token punctuation">,</span> <span class="token function">moment</span><span class="token punctuation">(</span>overTime <span class="token operator">-</span> beginTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;秒&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> click <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>clickBtn<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 延迟前执行，延迟时间内只有第一个请求有效。常用场景：用于表单提交防止多次点击（只提交第一份数据）</span>

    <span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 开始时间和结束时间相差 00 秒</span>

    <span class="token comment">// 多次调用,后面的请求会执行 click.cancel()方法。</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">click</span><span class="token punctuation">(</span><span class="token string">&#39;hell&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 未执行</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>如果 <code>leading</code> 和 <code>trailing</code> 都被设为true，则函数首次执行必定调用，后续每个等待周期中只执行一次</p></div><h2 id="throttle" tabindex="-1"><a class="header-anchor" href="#throttle" aria-hidden="true">#</a> throttle</h2><p>直译为&quot;节流&quot;，它和防抖非常类似，有如下区别：</p><ul><li>它的计时器不会清零重新计时———— 即它的等待时间 <code>wait</code> 就是防抖函数的 <code>options.maxWait</code></li><li>它的 <code>options.leading</code> 和 <code>options.trailing</code> 默认都是true</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">basic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> beginTime <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">inputValue</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;input value is &#39;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> overTime <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始时间和结束时间相差&#39;</span><span class="token punctuation">,</span> <span class="token function">moment</span><span class="token punctuation">(</span>overTime <span class="token operator">-</span> beginTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;秒&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">leading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">trailing</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> 

    <span class="token comment">// 多次调用，前面的请求会执行click.cancel()方法</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 开始时间和结束时间相差02秒</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),e=[o];function c(i,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","01.防抖节流.html.vue"]]);export{k as default};
