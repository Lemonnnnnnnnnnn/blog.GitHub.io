import{_ as a,p as s,q as e,a1 as n}from"./framework-c8e009f3.js";const c={},i=n(`<h2 id="package" tabindex="-1"><a class="header-anchor" href="#package" aria-hidden="true">#</a> package</h2><p><code>package包</code>是为了引入命名空间而设立的（各个包可以有相同名字的类），有包名的情况下，一个类完整的类名为：<strong>包名.类名</strong>。</p><blockquote><p>没有定义包名的class，它使用的是默认包，非常容易引起名字冲突，因此，不推荐不写包名的做法。</p></blockquote><h4 id="包作用域" tabindex="-1"><a class="header-anchor" href="#包作用域" aria-hidden="true">#</a> 包作用域</h4><p>一个包裹中的<code>class、field、method</code>可以相互访问（假设全都没有加限制符，如<code>private</code>）</p><h4 id="引入别的包" tabindex="-1"><a class="header-anchor" href="#引入别的包" aria-hidden="true">#</a> 引入别的包</h4><p>假设要引入的包为<code>abc</code>，要调用的方法为<code>Arrays()</code>,我们可以便捷的引入某个包的<strong>所有类</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">abc<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token class-name">Array</span> <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果类太多不好管理，可以指明类名：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">abc<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token class-name">Array</span> <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>要特别注意：包没有父子关系。java.util和java.util.zip是不同的包，两者没有任何继承关系。</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>如果引入的包还有子包，子包不会被引入</p></div><h4 id="如何在命令行运行带包的java文件" tabindex="-1"><a class="header-anchor" href="#如何在命令行运行带包的java文件" aria-hidden="true">#</a> 如何在命令行运行带包的java文件?</h4><p>例如我们有一个这样的java项目结构：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├─bin
└─src
    └─moduleDemo
            JavaTester.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>JavaTester.java</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">src<span class="token punctuation">.</span>moduleDemo</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaTester</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们直接编译编译<code>JavaTester.java</code>文件并运行，不会有任何问题：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>javac src/moduleDemo/JavaTester.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们得到了这样的文件结构，并能够成功运行它：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>└─src
    └─moduleDemo
            JavaTester.java
│           JavaTester.class
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> src/moduleDemo/JavaTester
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是把编译文件到处乱放可不是个好习惯，通过<code>-d</code>指令可以指定编译输出文件夹，我们将它输出到<code>bin</code> 文件夹下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>javac <span class="token parameter variable">-d</span> bin src/moduleDemo/JavaTester.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们现在有了这样的文件结构：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├─bin
│  └─src
│      └─moduleDemo
│              JavaTester.class
└─src
    └─moduleDemo
            JavaTester.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，让我们再次运行<code>JavaTester</code>文件 ： <code>java bin/src/moduleDemo/JavaTester</code></p><p><strong>错误: 找不到或无法加载主类 bin.src.moduleDemo.JavaTester ; 原因: java.lang.NoClassDefFoundError: src/moduleDemo/JavaTester (wrong name: bin/src/moduleDemo/JavaTester)</strong></p><p>原因是<code>package</code>, 我们设置了包名为<code>src.moduleDemo</code>,那么当虚拟机运行编译后的class文件时,它会读到这个信息,然后它会加入包名生成完整类名,并校验类名与<strong>你输入的路径名</strong>是否一致:</p><ul><li>输入路径为<code>bin/src/moduleDemo/JavaTester</code></li><li>完整类名为<code>src.moduleDemo.JavaTester</code></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>包名中的 <code>.</code> 和路径中的 <code>/</code> 可以直接替换</p></div><p>校验不通过.有两种方法解决这个问题:</p><ul><li>进入bin目录</li><li>通过 <code>-classpath</code> 告诉虚拟机需要到哪里去查找这个类,以下两个指令都可以:</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-cp</span> bin  src.moduleDemo.JavaTester
<span class="token function">java</span> <span class="token parameter variable">-cp</span> bin  src/moduleDemo/JavaTester
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,34),l=[i];function t(d,o){return s(),e("div",null,l)}const r=a(c,[["render",t],["__file","120.package.html.vue"]]);export{r as default};
