import{_ as o,p as e,q as t,a1 as n}from"./framework-c8e009f3.js";const r={},s=n('<h2 id="什么是组件式api" tabindex="-1"><a class="header-anchor" href="#什么是组件式api" aria-hidden="true">#</a> 什么是组件式API？</h2><p>我们先来看下vue2中我们是怎样处理一个组件的代码逻辑的：</p><ul><li>在<code>component</code>中定义<strong>渲染的组件</strong></li><li>在<code>props</code>中定义<strong>传入的属性</strong></li><li>在<code>methods</code>中定义<strong>使用的方法</strong></li><li>在<code>mounted()=&gt;{}</code>中定义<strong>要加载的数据</strong></li><li>...</li></ul><p>这样的处理模式最大的特点是什么呢？分工明确，逻辑清晰。</p><p>但同时也带来了一些问题。</p><p><strong>当你的组件变的越来越大时，你可能需要不停的“跳转”才能找到与一个功能相关的所有代码。</strong></p><p>这种时候，将同一个逻辑关注点的相关代码整理到一起，总是让人更容易进行阅读。</p><p>简而言之，<strong>组件式API就是将相关代码编写到一起的一种设计模式。</strong></p>',8),c=[s];function i(_,a){return e(),t("div",null,c)}const l=o(r,[["render",i],["__file","40.组合式API-简介.html.vue"]]);export{l as default};
