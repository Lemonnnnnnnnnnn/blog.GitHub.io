import{_ as e,M as o,p as c,q as i,R as n,t as s,N as t,a1 as p}from"./framework-c8e009f3.js";const l={},u=p(`<h2 id="匹配器" tabindex="-1"><a class="header-anchor" href="#匹配器" aria-hidden="true">#</a> 匹配器</h2><h3 id="expect" tabindex="-1"><a class="header-anchor" href="#expect" aria-hidden="true">#</a> expect</h3><p><code>expect</code> 方法接收一个值或函数，返回一个 <code>expection</code> 对象。用于调用 <code>matchers</code> 匹配器</p><h4 id="公共匹配器" tabindex="-1"><a class="header-anchor" href="#公共匹配器" aria-hidden="true">#</a> 公共匹配器</h4><p><strong>.toBe(目标值) ： 基本数据类型的比较</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;two plus two is four&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>.toEqual(目标值) : 对象类型的比较</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;object assign&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">one</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
    data<span class="token punctuation">[</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">one</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">two</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>.not.xxx(目标值) : 不匹配目标值</strong></p><h4 id="布尔值-类布尔值-匹配器" tabindex="-1"><a class="header-anchor" href="#布尔值-类布尔值-匹配器" aria-hidden="true">#</a> 布尔值（类布尔值）匹配器</h4><p><strong>判断是否是空值：</strong></p>`,11),r=n("li",null,[n("code",null,"expect(期望值).toBeNull()"),s(" : 匹配 "),n("code",null,"null")],-1),k=n("li",null,[n("code",null,"expect(期望值).toBeUndefined()"),s(" ： 匹配 "),n("code",null,"undefined")],-1),d=n("code",null,"expect(期望值).toBeTruthy()",-1),v={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"expect(期望值).toBeFalsy()",-1),g={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy",target:"_blank",rel:"noopener noreferrer"},h=p(`<h4 id="数字匹配器" tabindex="-1"><a class="header-anchor" href="#数字匹配器" aria-hidden="true">#</a> 数字匹配器</h4><p><strong>和数字比大小：</strong></p><ul><li><code>expect(期望值).toBeGreaterThan(目标值)</code> ： 期望值大于目标值</li><li><code>expect(期望值).toBeGreaterThanOrEqual(目标值)</code> : 期望值大于等于目标值</li><li><code>expect(期望值).toBeLessThan(目标值)</code> : 期望值小于目标值</li><li><code>expect(期望值).toBeLessThanOrEqual(目标值)</code> : 期望值小于等于目标值</li></ul><p><strong>判断浮点数是否相等：</strong></p><p><code>expect(浮点数).toBeCloseTo(目标值)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;adding floating point numbers&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span>
  <span class="token comment">//expect(value).toBe(0.3);       // 无效</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCloseTo</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">为什么js浮点数运算会出现精度问题？</p><p>js中会将浮点数转换成二进制来运算，因为有些浮点数用二进制表达是无穷的，IEEE 754双精度浮点数最多支持53位二进制位，53位后的精度会被截断，因此导致了浮点数运算的精度问题</p></div><h4 id="字符串匹配器" tabindex="-1"><a class="header-anchor" href="#字符串匹配器" aria-hidden="true">#</a> 字符串匹配器</h4><p><code>expect(期望值).toMatch(正则表达式)</code> : 正则是否匹配期望值 , 官方示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;there is no I in team&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;team&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">I</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// team中是否有I字符串</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;but there is a &quot;stop&quot; in Christoph&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;Christoph&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">stop</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Christoph中是否有stop字符串</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数组和可迭代对象的匹配器" tabindex="-1"><a class="header-anchor" href="#数组和可迭代对象的匹配器" aria-hidden="true">#</a> 数组和可迭代对象的匹配器</h4><p><code>expect(期望值).toContain(目标值)</code>: 期望值中是否包含目标值，官方示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> shoppingList <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;diapers&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;kleenex&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;trash bags&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;paper towels&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;milk&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">&#39;milk&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;the shopping list has milk on it&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>shoppingList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;milk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 数组中是否包含milk字符串</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>shoppingList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;milk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set中是否包含milk字符串</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;the shopping list has milk on it&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>shoppingList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContainEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">&#39;milk&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 数组中是否包含milk字符串</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>toContainEqual</code> 用来匹配数组中的对象。</p><h4 id="异常的匹配器" tabindex="-1"><a class="header-anchor" href="#异常的匹配器" aria-hidden="true">#</a> 异常的匹配器</h4><p><code>expect(函数).toThrow()</code> : 函数执行是否会抛出异常，官方示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">compileAndroidCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;you are using the wrong JDK&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;compiling android goes as expected&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">compileAndroidCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抛出错误</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">compileAndroidCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抛出Error类型的错误 </span>

  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">compileAndroidCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token string">&#39;you are using the wrong JDK&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取抛出的字符串</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">compileAndroidCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">JDK</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用正则匹配抛出的字符串</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function b(x,f){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("ul",null,[r,k,n("li",null,[d,s(" ： 匹配"),n("a",v,[s("Truthy值"),t(a)])]),n("li",null,[m,s(" ：匹配"),n("a",g,[s("falsy值"),t(a)])])]),h])}const y=e(l,[["render",b],["__file","03.匹配器.html.vue"]]);export{y as default};
