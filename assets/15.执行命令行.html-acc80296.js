import{_ as t,M as s,p as n,q as l,R as e,t as o,N as r,a1 as d}from"./framework-c8e009f3.js";const a={},i=d("<p><strong>原理</strong> 虽然nodejs是单线程语言，但我们可以通过<code>child_process</code>来创建子进程，进而通过子进程调用<code>.bat</code>、<code>.cmd</code>或者直接调用命令</p><p><strong>实现</strong> 我们可以通过<code>child_process</code>的<code>exec</code>方法来调用命令，以下是方法结构： <code>child_process.exec(command[, options][, callback])</code></p>",2),_={class:"custom-container tip"},p=e("p",{class:"custom-container-title"},"options",-1),u=e("p",null,"类型： object 可选参数：",-1),h=e("li",null,[o("cwd "),e("code",null,"<string> | <URL>"),o(" 子进程的当前工作目录。 默认值: "),e("code",null,"process.cwd()"),o("。")],-1),m=e("li",null,[o("shell "),e("code",null,"<string>"),o(" 用于执行命令的 shell。 例如：若要执行bash命令，可以使用git bash作为shell")],-1),f=e("code",null,"<AbortSignal>",-1),g={href:"http://nodejs.cn/api/child_process.html#child_processexeccommand-options-callback",target:"_blank",rel:"noopener noreferrer"},b=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"callback"),e("p",null,[o("类型： Function 传入参数： error "),e("code",null,"<Error>"),o(" : 当进程终止时抛出的错误 stdout "),e("code",null,"<string> | <Buffer>"),o(" : 子进程的输出（非实时） stderr "),e("code",null,"<string> | <Buffer>"),o(" ：子进程的报错")])],-1);function x(k,v){const c=s("ExternalLinkIcon");return n(),l("div",null,[i,e("div",_,[p,u,e("ul",null,[h,m,e("li",null,[o("signal "),f,o(" 允许使用中止信号中止子进程。 更多参考："),e("a",g,[o("nodejs文档"),r(c)])])])]),b])}const N=t(a,[["render",x],["__file","15.执行命令行.html.vue"]]);export{N as default};
