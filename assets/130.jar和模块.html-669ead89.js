import{_ as o,M as l,p as c,q as t,R as a,t as s,N as i,a1 as n}from"./framework-c8e009f3.js";const p={},d=n(`<h2 id="jar" tabindex="-1"><a class="header-anchor" href="#jar" aria-hidden="true">#</a> jar</h2><h4 id="创建和运行jar包" tabindex="-1"><a class="header-anchor" href="#创建和运行jar包" aria-hidden="true">#</a> 创建和运行jar包</h4><p><code>jar</code>就是<code>class类</code>的一个集合包，能够通过jar指令来创建，我们在上一节中将编译后的class文件放入了<strong>bin</strong>文件夹下，我们尝试将这些class文件打包成jar包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jar <span class="token parameter variable">-c</span> <span class="token parameter variable">-f</span> JavaTester.jar --main-class src.moduleDemo.JavaTester <span class="token parameter variable">-C</span> bin <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>-c</strong> : 等于 <code>--create</code> ，创建一个新的jar包</li><li><strong>-f</strong> : 等于 <code>--file</code>，指明创建的jar名字,这里是<code>JavaTester.jar</code></li><li><strong>--main-class</strong> ： 指明jar包的入口类名字，这里是<code>src.moduleDemo.JavaTester</code></li><li><strong>-C</strong> : 指明要打包的文件夹，这里是bin文件夹</li><li>最后的<code>.</code> : 指明要输出的路径为当前路径</li></ul><p>我们可以通过<code>java</code> 指令的 <code>-jar</code> 来直接运行<code>jar包</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span>  JavaTester.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="引用jar包" tabindex="-1"><a class="header-anchor" href="#引用jar包" aria-hidden="true">#</a> 引用jar包</h4><p>我们下载了第三方包 <code>commons-logging-1.2.jar</code> , 并且在 <code>Hello.java</code> 中引用它打印日志：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">package1</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Log</span></span><span class="token punctuation">;</span> <span class="token comment">// jar中的包路径</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">LogFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;start...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;end.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件结构：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
│  commons-logging-1.2.jar
└─package1
        Hello.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何让 <code>Hello.java</code> 文件能够找到引入的 <code>commons-logging-1.2.jar</code> 文件，使得 <code>import</code> 语句不报错呢？我们需要指定编译和运行的 <code>classpath</code> 地址</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>javac <span class="token parameter variable">-cp</span> commons-logging-1.2.jar package1/Hello.java
<span class="token function">java</span> <span class="token parameter variable">-cp</span> .\`<span class="token punctuation">;</span>commons-logging-1.2.jar package1.Hello  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意运行时如果使用的是 <code>powerShell</code> ， 需要使用 反引号**\`;**来转义 分号;</p>`,15),r={class:"custom-container tip"},u=a("p",{class:"custom-container-title"},"TIP",-1),m=a("p",null,"因为我们是在编译和运行时才将第三方库和当前代码关联起来，所以编写代码时很可能没有代码提示，并且IDE会标红报错。",-1),v={href:"/java/170.maven.html",target:"_blank",rel:"noopener noreferrer"},k=n(`<h2 id="模块module" tabindex="-1"><a class="header-anchor" href="#模块module" aria-hidden="true">#</a> 模块module</h2><p><code>模块module</code>是 <code>Java9</code> 引入的一个概念，它的实质是 <strong>package包的集合</strong> 它带来了两个重要的功能：</p><ol><li>将用户引用的庞大的jar包切割成多个子模块<code>jmod</code></li><li>往常运行一个Java项目需要自行下载完整的JRE运行环境。引入了模块后，JRE同样被切割成各个子模块，可以通过 <code>jlink</code> 命令将需要的JRE模块和项目链接打包。用户直接运行即可。</li></ol><h4 id="创建模块" tabindex="-1"><a class="header-anchor" href="#创建模块" aria-hidden="true">#</a> 创建模块</h4><p>我们可以通过 <code>jmod</code> 命令将一个jar包转换为jmod模块。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jmod create --class-path JavaTester.jar JavaTester.jmod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>--class-path</strong> ： 指明要分割的jar包</li></ul><p>然后我们得到了一个报错：<code>错误: module-info.class not found</code>。原因是如果你直接让编译器去分割jar包，它不明白要按什么规则来分割，需要一个<code>module-info.class</code>文件来指明分割规则：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token namespace">src<span class="token punctuation">.</span>firstModule</span><span class="token punctuation">{</span>
    <span class="token keyword">requires</span> <span class="token namespace">java<span class="token punctuation">.</span>base</span><span class="token punctuation">;</span> <span class="token comment">// 可不写，任何模块都会自动引入java.base    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后开始一连串操作：</p><ol><li>将 <code>src/moduleDemo</code> 中所有的java文件到bin文件夹下，并单独编译模块描述文件<code>src/module-info.java</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>javac <span class="token parameter variable">-d</span>  bin src/module-info.java src/moduleDemo/*.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>将bin文件夹打包成一个jar文件 <code>firstModule.jar</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jar <span class="token parameter variable">-c</span> <span class="token parameter variable">-f</span> firstModule.jar --main-class src.moduleDemo.JavaTester <span class="token parameter variable">-C</span> bin <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>将jar文件打包成一个jmod文件 : <code>firstModule.jmod</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jmod create --class-path firstModule.jar firstModule.jmod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>将jmod文件和所需的jre（运行环境）通过<code>jlink</code>打包到jre文件夹下</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jlink --module-path firstModule.jmod --add-modules src.firstModule <span class="token parameter variable">--output</span> jre/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>--module-path</strong> : 指明要链接的jmod文件</li><li><strong>--add-modules</strong> : 指明要链接的module名字（在module-info.java中定义的）</li></ul><ol start="5"><li>直接用打包好的jre执行module文件：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jre/bin/java <span class="token parameter variable">--module</span> src.firstModule        
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>这么复杂的操作当然是由ide帮我们来完成啦:D</p></div><h4 id="module-info" tabindex="-1"><a class="header-anchor" href="#module-info" aria-hidden="true">#</a> module-info</h4><p>定义一个module，用<code>requires</code> 表示需要哪些module，用<code>exports</code>暴露一个module中的某些包</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token operator">&lt;</span><span class="token keyword">module</span><span class="token operator">-</span>name<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
   <span class="token keyword">requires</span> <span class="token operator">&lt;</span><span class="token keyword">module</span><span class="token operator">-</span>name1<span class="token operator">&gt;</span><span class="token punctuation">;</span>
   <span class="token keyword">exports</span> <span class="token operator">&lt;</span><span class="token keyword">package</span><span class="token operator">-</span>name1<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25);function g(b,h){const e=l("ExternalLinkIcon");return c(),t("div",null,[d,a("div",r,[u,m,a("p",null,[s("因此第三方包的管理通常通过ide和"),a("a",v,[s("maven"),i(e)]),s("来完成。不需要手动构建。")])]),k])}const f=o(p,[["render",g],["__file","130.jar和模块.html.vue"]]);export{f as default};
