import{_ as e,p as i,q as d,a1 as n}from"./framework-c8e009f3.js";const a={},l=n(`<h2 id="什么是ahk" tabindex="-1"><a class="header-anchor" href="#什么是ahk" aria-hidden="true">#</a> 什么是AHK</h2><p><code>AutoHotKey</code> 是一款自定义热键工具。</p><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><ol><li>到官网下载软件</li><li>新建一个<code>ahk</code>文件，编辑输入自定义的快捷键，保存并运行该文件。</li></ol><p>举例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>; 正无穷
^i::
SendInput +infty
return
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样在按下 <code>ctrl + i</code> 时会自动输入 <code>+infty</code></p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><h4 id="分隔符" tabindex="-1"><a class="header-anchor" href="#分隔符" aria-hidden="true">#</a> 分隔符</h4><ul><li><code>::</code> 前面的是快捷键，后面的是任务</li></ul><h4 id="关键词" tabindex="-1"><a class="header-anchor" href="#关键词" aria-hidden="true">#</a> 关键词</h4><ul><li><strong>^</strong> : <code>ctrl</code></li><li><strong>!</strong> : <code>alt</code></li><li><strong>#</strong> : <code>win</code>，<code>windows logo</code> 按键</li><li><strong>+</strong> : <code>shift</code></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>以上关键词可以直接组合，例如 <code>^!l</code> == <code>ctrl + alt + l</code>。</li><li>他们以及<code>{}</code>如果出现在Send中，会被识别成为命令，为了输入原本的字符 <ol><li>使用<code>{}</code>包裹关键字</li><li>使用<code>SendRaw</code> 输入原始字符</li></ol></li></ol></div><ul><li><strong>;</strong> : 注释符</li><li><strong>{...}</strong> : 块作用域，常用于函数定义和控制数据流，如 <code>{Ctrl down}c{Ctrl up}</code> 表示一个复制操作</li><li><strong>(...)</strong> : 长命令分割，例如：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Send,
(
Line 1
Line 2
Apples are a fruit.
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>::[a]::[b]</strong> : 输入a再按<strong>终止符，如回车、空格</strong>会输出b</li><li><strong>😗:[a]::[b]</strong> : 输入a会<strong>直接替换</strong>输出b</li></ul><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h2><h4 id="添加左右信息" tabindex="-1"><a class="header-anchor" href="#添加左右信息" aria-hidden="true">#</a> 添加左右信息</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>^b::  ; 以加粗信息为例
Send, {Ctrl down}c{Ctrl up}  ; 复制选择的信息，可用^c 替代, 官方称这样更安全
SendInput, [b]{Ctrl down}v{Ctrl up}[/b] ; 前面添加信息 - 粘贴 - 后面添加信息。 可用 ^v 代替
return  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),r=[l];function s(t,c){return i(),d("div",null,r)}const u=e(a,[["render",s],["__file","AHK.html.vue"]]);export{u as default};
