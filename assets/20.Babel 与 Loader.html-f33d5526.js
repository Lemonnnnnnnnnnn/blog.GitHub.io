import{_ as p,M as o,p as l,q as c,R as s,t as n,N as e,a1 as t}from"./framework-c8e009f3.js";const i={},r=s("h2",{id:"babel-与-jsx",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#babel-与-jsx","aria-hidden":"true"},"#"),n(" babel 与 jsx")],-1),u=s("strong",null,"先被编译成 js 文件",-1),d=s("em",null,"babel",-1),k={href:"https://github.com/facebook/react/blob/main/package.json",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>因此，我们通过手动编译 jsx 代码来理解 babel 的基本使用。</p><p><strong>首先引入依赖包：</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
	<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;build&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;babel a.jsx&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;@babel/core&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.20.12&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;@babel/cli&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.20.7&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;@babel/preset-react&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.18.6&quot;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>@babel/core</code> : babel 实现的核心包。</li><li><code>@babel/cli</code> : 如何告诉 babel 编译哪个文件呢？通过命令行 <code>babel a.jsx</code> 让 babel 编译 a.jsx 文件，<strong>cli 包提供了这个命令行工具</strong></li><li><code>@babel/preset-react</code> : preset 表示预设，表示引入 babel 预设的解析 react 代码的包</li></ul><p>第二步，我们需要告诉 babel，我们想要<strong>使用</strong>引入的 <code>@babel/preset-react</code> ，我们将这个配置写在 <code>babel.config.json</code> 文件中 (babel v7.8 后使用的配置文件是 json 格式的，之前是 js 格式的）。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// babel.config.json</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span>
            <span class="token string">&quot;@babel/preset-react&quot;</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>a.jsx</code>中写一行 jsx 代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>好的，我们调用命令行工具 ，就可以看到我们编写的 jsx 代码已经被转换成了正常的 js 代码了：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">pnpm</span> build

<span class="token operator">&gt;</span> @ build D:<span class="token punctuation">\\</span>code<span class="token punctuation">\\</span>babel-test
<span class="token operator">&gt;</span> babel a.jsx

const element <span class="token operator">=</span> /*<span class="token comment">#__PURE__*/React.createElement(&quot;h1&quot;, null, &quot;Hello, world!&quot;);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>babel 不仅可以编译 jsx 代码，它还是一个编译库，能够将 ES2015,ES2016,ES2017 等代码解析为 ES5 的代码，以实现在旧版本的浏览器中 js 代码可以正常运行</strong>。在此不再一一演示。</p><h2 id="babel-loader-和-webpack" tabindex="-1"><a class="header-anchor" href="#babel-loader-和-webpack" aria-hidden="true">#</a> babel-loader 和 webpack</h2><p>webpack 作为一个打包工具，它必须要先将开发者编写的代码转化为浏览器可运行的代码，因此它也需要 babel 来帮忙。怎样引入 babel 呢？webpack 提供了一个 <em>Loader</em> 的概念：</p><p>webpack 只能理解 javascript 和 json 文件，Loader 允许 webpack 处理其他类型的文件，并将他们转化为有效的模块（modules）———— 模块指的是可以被引入的模块，如 ES6 的 <code>import</code> ， commonjs 的 <code>require()</code> 等。</p><p>简单来说，<strong>webpack 将不同类型的文件转化为一个个 <em>module</em>，这种转化需要使用 Loader 来实现</strong>。</p><p>接下来我们以 &quot;webpack 处理 jsx 文件&quot; 这个例子来介绍 Loader 和 module 的使用。</p><h2 id="webpack-处理-jsx-文件" tabindex="-1"><a class="header-anchor" href="#webpack-处理-jsx-文件" aria-hidden="true">#</a> webpack 处理 jsx 文件</h2><p>引入依赖</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;@babel/core&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.20.12&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;@babel/preset-react&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^7.18.6&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;babel-loader&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^9.1.2&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;html-webpack-plugin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.5.0&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;react&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^18.2.0&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;react-dom&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^18.2.0&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;webpack&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.75.0&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;webpack-cli&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^5.0.1&quot;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析：</strong></p><ul><li>因为我们可以通过 <code>webpack-cli</code> 来使用 babel，所以不再需要 <code>@babel/cli</code> 库。</li><li>我们需要新加一个 <code>babel-loader</code> 作为 Loader 来使用 babel.</li></ul><p>接下来我们编写一个基本的 jsx 代码，其作用是将 <code>Hello world</code> 渲染到 html 中 id 为 <code>wrapper</code> 的结点中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> React <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ReactDOM <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#wrapper&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们要定义一个具有 id 为 <code>wrapper</code>结点的 html 文件作为模板：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在 <code>webpack.config.js</code> 中使用 <code>html-webpack-plugin</code> 插件时，可以<strong>指明我们定义的 html 模板，让插件只执行注入脚本的功能</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//webpack.config.js</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./main.jsx&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 指定项目的 html 文件路径</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在 webpack 依旧不知道如何解析 jsx 文件，我们需要通过<code>module</code> 属性告诉它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//webpack.config.js</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.jsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 处理。jsx 结尾的文件</span>
            <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 不处理 node_modules 文件夹中的文件</span>
            <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 使用 babel-loader</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>babel-loader</code> 会<strong>自动读取</strong> babel 的配置文件 <code>babel.config.json</code>，我们和刚才一样在该文件中使用预设的 <code>@babel/preset-react</code> 以解析 react 代码：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;presets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;@babel/preset-react&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>pnpm build</code> ，<code>webpack</code> 命令会生成 <code>dist/bundle.js</code> 与 <code>dist/index.html</code> 两个文件。 打开 <code>index.html</code> 查看效果：</p><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20230218122548.png" alt=""></p><h3 id="假如不使用-babel-config-json-文件" tabindex="-1"><a class="header-anchor" href="#假如不使用-babel-config-json-文件" aria-hidden="true">#</a> 假如不使用 <code>babel.config.json</code> 文件</h3>`,34),v=s("code",null,"babel-loader",-1),m={href:"https://webpack.js.org/loaders/babel-loader/#options",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.jsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 编译对象</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 排除对象，需要配合 test 使用</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 加载器：babel-loader</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-react&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 插件 @babel/preset-react</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),q={href:"https://babeljs.io/docs/en/options",target:"_blank",rel:"noopener noreferrer"},h=s("code",null,"babel.config.json",-1),j=s("code",null,"@babel/cli",-1),y=s("p",null,"但大多数的 options 选项传递给 loader 后直接由该 loader 进行处理，这里不再展开讨论。",-1);function x(_,w){const a=o("ExternalLinkIcon");return l(),c("div",null,[r,s("p",null,[n("假设我们编写了一段 jsx 代码，它是不能被浏览器直接执行的，它需要"),u,n("。而这个工作就是由 "),d,n(" 来完成的。如果你打开 react 源码的 "),s("a",k,[n("package.json"),e(a)]),n(" 文件，你就可以看到其中引用了大量的 babel 包。")]),b,s("p",null,[v,n(" 提供了一个 "),s("a",m,[n("options"),e(a)]),n(" 属性让我们直接将 babel 的配置信息传递给它，例如上面的例子可以用 options 这样编写。")]),g,s("p",null,[n("说句题外话，这里的 options 是由"),s("a",q,[n("babel进行读取"),e(a)]),n("，babel-loader 只负责传递。babel 提供了多种入口向其传递配置，如 "),h,n(" , "),j,n(" 等等。")]),y])}const E=p(i,[["render",x],["__file","20.Babel 与 Loader.html.vue"]]);export{E as default};
