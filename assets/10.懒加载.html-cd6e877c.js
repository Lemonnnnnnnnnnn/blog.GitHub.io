import{_ as t,M as p,p as e,q as o,R as s,t as n,N as c,a1 as l}from"./framework-c8e009f3.js";const i={},r=l(`<p>如果你使用过<code>webpack</code>打包工具，你或许会发现，打包后的文件有时庞大无比.</p><p>比如，我打包一个简单的react文件： <img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220426232810.png" alt=""></p><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220426232816.png" alt=""></p><p>单页应用打包文件过大，将导致用户花许多时间来等待首屏的加载。</p><p>优化办法很简单：<strong>将大文件拆分开来，按需加载</strong>。</p><h2 id="webpack和import" tabindex="-1"><a class="header-anchor" href="#webpack和import" aria-hidden="true">#</a> Webpack和import</h2><p><code>webpack</code>提供了许多分包方法，动态import引入就是其中之一：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 动态地加载模块。调用 import() 之处，被作为分离的模块起点，意思是，被请求的模块和它引用的所有子模块，会分离到一个单独的 chunk 中。</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> _ <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;lodash&quot; */</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack将一个分包称为一个<code>chunk</code>，通过<code>import().then()</code>语法或者是<code>await import</code>语法，webpack可以将需要引入的模块单独打成一个<code>chunk</code>，在加载到它的时候才读取。这样就减少了大文件的数量，加快了首屏加载的速度。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>/* webpackChunkName: &quot;lodash&quot; */</code>:的作用是指定<code>chunk</code>的名字</p></div><h2 id="react-lazy" tabindex="-1"><a class="header-anchor" href="#react-lazy" aria-hidden="true">#</a> React.lazy</h2><p>React为我们提供了一个便利的方法<code>React.lazy</code>，让我们看看如何使用它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Tabs <span class="token keyword">from</span> <span class="token string">&#39;./components/Tabs&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Glimmer <span class="token keyword">from</span> <span class="token string">&#39;./components/Glimmer&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// const Comments = React.lazy(() =&gt; import(&#39;./components/Comments&#39;));</span>

<span class="token comment">// 模拟加载延迟时间</span>
<span class="token keyword">const</span> Comments <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./components/Comments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Photos <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./components/Photos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">LazyLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>tab<span class="token punctuation">,</span> setTab<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;photos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div <span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Tabs onTabSelect<span class="token operator">=</span><span class="token punctuation">{</span>setTab<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>Glimmer <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token punctuation">{</span>tab <span class="token operator">===</span> <span class="token string">&#39;photos&#39;</span> <span class="token operator">?</span> <span class="token operator">&lt;</span>Photos <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token operator">&lt;</span>Comments <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> LazyLoad<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用一个<code>Suspense（暂停）</code>组件包裹动态引用的组件<code>Photo和Comment</code>，它的作用是在加载组件的时候展示一个<code>Loading</code>内容，我们这里自定义了一个<code>Glimmer</code>组件作为动态加载时的loading内容。</p><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/lazy.gif" alt=""></p><p>我们使用了一个<code>setTimeout</code>方法延迟了加载时间，使<code>Loading</code>较长时间的展示。事实上，动态加载模块的速度很快，它只会一闪而过【Glimmer闪烁】。但是这种闪烁的确给用户带来了不好的观感。</p>`,16),u={href:"/react/react16-react18/20.Transition.html",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[r,s("p",null,[n("我们会在"),s("a",u,[n("Transition"),c(a)]),n("章节解决这个问题。")])])}const b=t(i,[["render",k],["__file","10.懒加载.html.vue"]]);export{b as default};
