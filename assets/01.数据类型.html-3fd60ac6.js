import{_ as n,p as s,q as a,a1 as e}from"./framework-c8e009f3.js";const t={},p=e(`<h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r&#39;\\t&#39;</span><span class="token punctuation">)</span> <span class="token comment"># \\t  r&#39;&#39;表示不转义</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span> <span class="token comment"># </span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&#39;&#39;&#39;
        1
        2
        3
      &#39;&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 用&#39;&#39;&#39; 表示多行内容代替\\n</span>

s <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>
s2 <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span> <span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 替代</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h3><p>元组 <code>tuple</code>和列表 <code>list</code> 非常类似，唯一的区别是它一旦初始化就不能修改。</p><p>优点：使用元组可以让你的程序更安全。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> 
t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment"># 为了区分元素和运算符括号，在声明只有一个元素的元组时会在后面加一个逗号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span>foo <span class="token punctuation">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">}</span> <span class="token comment"># 定义</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span> <span class="token keyword">in</span> d<span class="token punctuation">)</span> <span class="token comment"># 是否存在</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span>   <span class="token comment"># 是否存在</span>
d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 删除 </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">}</span>
s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
s2 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">&amp;</span> s2<span class="token punctuation">)</span> <span class="token comment"># 利用位运算符 &amp; 取交集</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">|</span> s2<span class="token punctuation">)</span> <span class="token comment"># 利用位运算符 | 取并集</span>

<span class="token comment"># a &amp; b ：将a和b转化为二进制，将每一位 用&amp; 计算</span>
<span class="token comment"># a | b : 将每一位 用| 计算</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","01.数据类型.html.vue"]]);export{r as default};
