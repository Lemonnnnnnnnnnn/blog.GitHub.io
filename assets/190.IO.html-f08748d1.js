import{_ as p,M as o,p as c,q as l,R as n,t as s,N as t,a1 as a}from"./framework-c8e009f3.js";const u={},i=a(`<h2 id="inputstream" tabindex="-1"><a class="header-anchor" href="#inputstream" aria-hidden="true">#</a> InputStream</h2><p><code>InputStream</code> 就是Java标准库提供的最基本的输入流. 他是一个<strong>抽象类</strong>。它定义一个核心抽象方法 <code>read()</code> 用于从数据源处将数据<strong>输入(input)<strong>内存中。输入的单位是</strong>字节</strong>。</p><p><code>FileInputStream</code> 是 <code>InputStream</code> 的一个子类。它可以用于读取文件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;src/readme.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析：</strong></p>`,5),r={href:"/java/100.%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html",target:"_blank",rel:"noopener noreferrer"},d=n("li",null,[s("每当我们调用 "),n("code",null,"InputStream.read()"),s(" 方法，都会返回下一个字节内容，最后返回 -1 .")],-1),k=a(`<h2 id="缓冲区" tabindex="-1"><a class="header-anchor" href="#缓冲区" aria-hidden="true">#</a> 缓冲区</h2><p>在读取流的时候，一次读取一个字节并不是最高效的方法。 <code>read()</code> 方法接收一个参数用于指定一次性读入多少个字节的数据。因此我们可以定义一个缓冲区来一次性读入多个字节：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;src/readme.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 定义1000个字节大小的缓冲区:</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 读取到缓冲区</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;read &quot;</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">&quot; bytes.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reader" tabindex="-1"><a class="header-anchor" href="#reader" aria-hidden="true">#</a> Reader</h2><p><code>Reader</code>是Java提供的另一个输入流抽象类。与 <code>InputStream</code> 不同的是， <code>InputStream</code> 以字节为单位读入数据，而 <code>Reader</code> 以 <code>Char</code> 为单位读入数据。</p><p><code>FileReader</code>是Reader的一个子类，它可以打开文件并获取Reader。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;src/readme.txt&quot;</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 指定编码格式</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;read &quot;</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">&quot; chars.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析：</strong></p><p>以 <code>char</code> 为单位读取文件时，需要指定编码格式，否则JVM无法判断读入的数据是一个字母还是一个汉字，结果会导致<strong>乱码</strong>。</p><h2 id="inputstreamreader" tabindex="-1"><a class="header-anchor" href="#inputstreamreader" aria-hidden="true">#</a> InputStreamReader</h2><p><code>InputStreamReader</code> 接收一个 <code>InputStream</code> 作为参数，将其转化为 <code>Reader</code>。</p><p>之所以可以这样操作的原因是， <code>Reader</code> 本身就是基于 <code>InputStream</code> 实现的，它先从 <code>InputStream</code> 中读入字节流，然后根据编码来阅读字节流，将其以字母为单位进行分割，实现了以字母为单位读取数据。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 用InputStream的子类FileInputStream读取一个文件</span>
<span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;src/readme.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 变换为Reader</span>
<span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有时候，你也会见到没有为InputStreamReader提供编码的写法，如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是因为 <code>InputStreamReader</code> 默认会读取文件的编码，如果没有读取到编码，则会将编码设为UTF-8，相关源码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Charset</span> <span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultCharset <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> csn <span class="token operator">=</span> <span class="token class-name">GetPropertyAction</span>
                        <span class="token punctuation">.</span><span class="token function">privilegedGetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;file.encoding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Charset</span> cs <span class="token operator">=</span> <span class="token function">lookup</span><span class="token punctuation">(</span>csn<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    defaultCharset <span class="token operator">=</span> cs<span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    defaultCharset <span class="token operator">=</span> sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>cs<span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> defaultCharset<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bufferedreader" tabindex="-1"><a class="header-anchor" href="#bufferedreader" aria-hidden="true">#</a> BufferedReader</h2>`,18),m=n("code",null,"BufferedReader",-1),v=n("code",null,"Reader",-1),b={href:"/java/300.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html",target:"_blank",rel:"noopener noreferrer"},h=a(`<p>默认缓冲区大小为8KB：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> defaultCharBufferSize <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用示例一-读取文件" tabindex="-1"><a class="header-anchor" href="#使用示例一-读取文件" aria-hidden="true">#</a> 使用示例一：读取文件</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
                <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;src/readme.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 按字节流读入文件</span>
                <span class="token class-name">Reader</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转化成Reader，按字母读入文件</span>
                <span class="token class-name">BufferedReader</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转化为BufferedReader，利用默认提供的缓冲区</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bis<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 逐行输出文件中的数据</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解析：</strong></p>`,5),f=n("code",null,"BufferedReader.lines()",-1),w=n("code",null,"List.forEach",-1),y={href:"/java/180.%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html",target:"_blank",rel:"noopener noreferrer"},g=a(`<h3 id="使用示例二-读取用户输入信息" tabindex="-1"><a class="header-anchor" href="#使用示例二-读取用户输入信息" aria-hidden="true">#</a> 使用示例二：读取用户输入信息</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span> <span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedReaderDemo01</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">BufferedReader</span> buf <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>		<span class="token comment">// 声明对象</span>
		buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>	<span class="token comment">// 将字节流变为字符流</span>
		<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>	<span class="token comment">// 接收输入内容</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入内容：&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
		<span class="token keyword">try</span><span class="token punctuation">{</span>
			str <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>	<span class="token comment">// 读取一行数据</span>
		<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>	<span class="token comment">// 输出信息</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的内容为：&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span> <span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function _(S,I){const e=o("ExternalLinkIcon");return c(),l("div",null,[i,n("ul",null,[n("li",null,[s("使用了"),n("a",r,[s("try()"),t(e)]),s("方法帮我们自动关闭文件资源。")]),d]),k,n("p",null,[m,s(" 继承自 "),v,s(" ，其提供了一个默认的缓冲区，遵循了设计模式中的"),n("a",b,[s("外观模式"),t(e)]),s("。 给开发者提供了便利。")]),h,n("p",null,[f,s(" 按行返回List ，"),w,s(" 用法详见"),n("a",y,[s("函数式编程"),t(e)])]),g])}const x=p(u,[["render",_],["__file","190.IO.html.vue"]]);export{x as default};
