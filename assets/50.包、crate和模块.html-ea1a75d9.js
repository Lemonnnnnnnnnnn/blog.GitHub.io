import{_ as a,M as e,p as t,q as p,R as n,t as c,N as o,a1 as i}from"./framework-c8e009f3.js";const l={},u=i(`<h2 id="简单了解" tabindex="-1"><a class="header-anchor" href="#简单了解" aria-hidden="true">#</a> 简单了解</h2><p>对入门者来说，可以用最直接的概念给<strong>包、crate 和模块</strong>一个定义，这种定义很不准确，但可以随着对 rust 了解的深入对这些理解进行自我修正：</p><ul><li>包就是你创建的一个项目</li><li>crate 是 rust 编译时的最小单位。</li><li>模块就是一个文件。</li></ul><p><strong>一个包可以包含多个 crate，一个 crate 可以包含多个模块</strong>。</p><h2 id="模块与私有性" tabindex="-1"><a class="header-anchor" href="#模块与私有性" aria-hidden="true">#</a> 模块与私有性</h2><p>我们在 <em>main.rs</em> 文件同级下新建一个 <em>student.rs</em> 文件，</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m student!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 <em>main.rs</em> 中引用它：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token namespace">student<span class="token punctuation">::</span></span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但我们会得到一个报错： <strong>use of undeclared crate or module <code>student</code></strong>。他说我们使用了一个未声明的 crate 或模块 <code>student</code> 。 也就是说我们可以将 <em>student.rs</em> 文件看作是一个 <code>模块 mod</code>，我们要使用它需要提前声明：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">mod</span> <span class="token module-declaration namespace">student</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token namespace">student<span class="token punctuation">::</span></span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再次运行 <code>cargo run</code> ，但又报错了：<strong>private function</strong> 。因为<strong>模块内的方法默认是私有的</strong>，我们需要修改一下 <em>student.rs</em> 中的 <code>say()</code> 方法，给它加上一个 <code>pub</code> 前缀：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m student!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但我们通常不会这样将模块放在根目录下，我们会创建一个文件夹将他们归类在一起，生成如下的项目结构：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── src
│   ├── entity
│   │   ├── farmer.rs
│   │   ├── garden.rs
│   ├── main.rs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// farmer.rs</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m farmer!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// garden.rs</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m garden!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们尝试在 <code>main.rs</code> 文件中调用他们：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">mod</span> <span class="token module-declaration namespace">entity</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token namespace">entity<span class="token punctuation">::</span>farmer<span class="token punctuation">::</span></span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但又双叒叕报错了： **failed to resolve: could not find <code>farmer</code> in <code>entity</code> could not find <code>farmer</code> in <code>entity</code> **。</p><p>这是因为<strong>文件夹不会被看作是一个模块</strong>，当我们声明一个模块 <code>mod entity</code> 时，编译器会到如下两个地方查找模块：</p><ul><li>在文件 <em>src/entity.rs</em></li><li>在文件 <em>src/entity/mod.rs</em></li></ul><p>这告诉我们可以在 <code>entity</code> 目录下定义一个 <code>mod.rs</code>文件专门用于导出模块：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">//mod.rs</span>
<span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">farmer</span><span class="token punctuation">;</span>
<span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">garden</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在可以成功运行 <code>cargo run</code> 了。</p><h3 id="结构体和枚举的私有性" tabindex="-1"><a class="header-anchor" href="#结构体和枚举的私有性" aria-hidden="true">#</a> 结构体和枚举的私有性</h3><p>在模块化编程中，与方法一样，结构体 struct 和枚举 enum 也同样需要适时的为其加上 <code>pub</code> 标签。这里有两点需要注意：</p><ol><li>如果我们在一个结构体定义的前面使用了 pub ，这个结构体会变成公有的，但是<strong>这个结构体的字段仍然是私有的</strong>。 我们一般推荐用方法来获取结构体的属性值，如果我们需要直接获取其属性值，则需要为字段也加上 <code>pub</code> 标签。</li></ol><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code> <span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Breakfast</span> <span class="token punctuation">{</span>
     <span class="token keyword">pub</span> toast<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
     seasonal_fruit<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
 <span class="token punctuation">}</span>

 <span class="token keyword">impl</span> <span class="token class-name">Breakfast</span> <span class="token punctuation">{</span>
     <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">summer</span><span class="token punctuation">(</span>toast<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Breakfast</span> <span class="token punctuation">{</span>
         <span class="token class-name">Breakfast</span> <span class="token punctuation">{</span>
             toast<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>toast<span class="token punctuation">)</span><span class="token punctuation">,</span>
             seasonal_fruit<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;peaches&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>与结构体相反，如果我们为枚举值 <code>enum</code> 加上 <code>pub</code> 标签，则<strong>它的所有成员都将变为公有</strong>：</li></ol><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Appetizer</span> <span class="token punctuation">{</span>
  <span class="token class-name">Soup</span><span class="token punctuation">,</span>
  <span class="token class-name">Salad</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">eat_at_restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> order1 <span class="token operator">=</span> <span class="token class-name">Appetizer</span><span class="token punctuation">::</span><span class="token class-name">Soup</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> order2 <span class="token operator">=</span> <span class="token class-name">Appetizer</span><span class="token punctuation">::</span><span class="token class-name">Salad</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="寻找父模块" tabindex="-1"><a class="header-anchor" href="#寻找父模块" aria-hidden="true">#</a> 寻找父模块</h2><p>我们刚才的例子都是在父模块中引用子模块，那么反过来要怎么做呢？有两种方法，</p><ul><li>可以用 <code>crate::</code> 从根目录开始找到我们要用的父模块</li><li>可以用 <code>super::</code> 来找到上级模块。</li></ul><p>比如我们在 <code>entity</code> 下新增一个 <code>teacher.rs</code> 文件，让其引用 <code>main.rs</code> 同级下的 <code>student.rs</code> 文件：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// teacher.rs</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">call_student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>student<span class="token punctuation">::</span></span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>super<span class="token punctuation">::</span>student<span class="token punctuation">::</span></span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="use" tabindex="-1"><a class="header-anchor" href="#use" aria-hidden="true">#</a> use</h2><p>对于多级目录的引用，写起来可能会很不方便，此时我们可以使用 <code>use</code> 语法，将模块引入当前的作用域，这样我们就不用再写模块的路径了，比如：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">mod</span> <span class="token module-declaration namespace">entity</span><span class="token punctuation">;</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">student</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">entity<span class="token punctuation">::</span></span>farmer<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token namespace">student<span class="token punctuation">::</span></span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">farmer<span class="token punctuation">::</span></span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">entity<span class="token punctuation">::</span>teacher<span class="token punctuation">::</span></span><span class="token function">call_student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果有同名的方法/模块/结构体/枚举类？</strong></p><p>使用 <code>as</code> 关键字即可：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token keyword">as</span> <span class="token class-name">IoResult</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">function1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
    <span class="token comment">// --snip--</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">function2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">IoResult</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// --snip--</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果要引入一个作用域中的多个项？</strong></p><p>使用 <code>{}</code> 关键字即可：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token class-name">Ordering</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>
<span class="token comment">// --snip--</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">cmp<span class="token punctuation">::</span></span><span class="token class-name">Ordering</span><span class="token punctuation">,</span> io<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果要引用一个项自身和它的子项？</strong></p><p>使用 <code>self</code> 关键字即可：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Write</span><span class="token punctuation">;</span>
<span class="token comment">// --snip--</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Write</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果要引入一个路径下的所有公有项？</strong></p><p>使用 <code>*</code> 关键字即可：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h2>`,52),d={href:"https://github.com/Lemonnnnnnnnnnn/rust-study/tree/master/mod-demo",target:"_blank",rel:"noopener noreferrer"};function r(k,m){const s=e("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[n("a",d,[c("https://github.com/Lemonnnnnnnnnnn/rust-study/tree/master/mod-demo"),o(s)])])])}const b=a(l,[["render",r],["__file","50.包、crate和模块.html.vue"]]);export{b as default};
