import{_ as n,p as s,q as a,a1 as t}from"./framework-c8e009f3.js";const p={},o=t(`<h2 id="为什么要使用回调" tabindex="-1"><a class="header-anchor" href="#为什么要使用回调" aria-hidden="true">#</a> 为什么要使用回调?</h2><p>从 <code>fs</code> 的例子中我们可以看到 , 我们主要介绍的一种异步回调的写法. 在异步任务完成后,将其结果抛给外层的回调函数,允许回调函数对结果进行任意操作.</p><p>它能够很好的处理异步逻辑,并且能够提升整体代码的可读性.</p><p>事实上,这种思想并不局限于异步操作.我们定义一个类,并将其实例化并且调用它的方法,通常我们会这么写:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
    <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I am studying!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 大量代码</span>
        <span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> student
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">dealWithInstance</span><span class="token punctuation">(</span><span class="token parameter">student</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 大量代码</span>
        student<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">dealWithInstance</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以先用一个函数获取它的实例,并将实例传入一个新的函数进行处理 , 这种思想和回调函数相当类似 :</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">run2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">callback</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span> <span class="token comment">// 将实例提供给回调函数</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 将获取实例和执行写到一起,提升可读性</span>
    <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">student</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        student<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h2><p>上面的代码非常简单,事实上, 项目中的代码量和函数可能会非常庞大,并且有多层嵌套结构,甚至来自两个不同的项目. 例如 <code>antd</code> 中的 <code>notification</code> 组件:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">notice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用方法</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">notice</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">args</span><span class="token operator">:</span> ArgsProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... 许多代码</span>
  <span class="token function">getNotificationInstance</span><span class="token punctuation">(</span> <span class="token comment">// 获取实例</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">prefixCls</span><span class="token operator">:</span> outerPrefixCls<span class="token punctuation">,</span>
      placement<span class="token punctuation">,</span>
      top<span class="token punctuation">,</span>
      bottom<span class="token punctuation">,</span>
      getContainer<span class="token punctuation">,</span>
      closeIcon<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">notification</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 对实例进行处理</span>
      notification<span class="token punctuation">.</span><span class="token function">notice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">(</span>
          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>iconNode <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefixCls<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-with-icon</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
            <span class="token punctuation">{</span>iconNode<span class="token punctuation">}</span>
            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefixCls<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-message</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
              <span class="token punctuation">{</span>autoMarginTag<span class="token punctuation">}</span>
              <span class="token punctuation">{</span>args<span class="token punctuation">.</span>message<span class="token punctuation">}</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefixCls<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-description</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>args<span class="token punctuation">.</span>description<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
            <span class="token punctuation">{</span>args<span class="token punctuation">.</span>btn <span class="token operator">?</span> <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefixCls<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-btn</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>args<span class="token punctuation">.</span>btn<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        duration<span class="token punctuation">,</span>
        <span class="token literal-property property">closable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token literal-property property">onClose</span><span class="token operator">:</span> args<span class="token punctuation">.</span>onClose<span class="token punctuation">,</span>
        <span class="token literal-property property">onClick</span><span class="token operator">:</span> args<span class="token punctuation">.</span>onClick<span class="token punctuation">,</span>
        <span class="token literal-property property">key</span><span class="token operator">:</span> args<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
        <span class="token literal-property property">style</span><span class="token operator">:</span> args<span class="token punctuation">.</span>style <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">className</span><span class="token operator">:</span> args<span class="token punctuation">.</span>className<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">import</span> Notification <span class="token keyword">from</span> <span class="token string">&#39;rc-notification&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getNotificationInstance</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    prefixCls<span class="token punctuation">,</span>
    placement <span class="token operator">=</span> defaultPlacement<span class="token punctuation">,</span>
    getContainer <span class="token operator">=</span> defaultGetContainer<span class="token punctuation">,</span>
    top<span class="token punctuation">,</span>
    bottom<span class="token punctuation">,</span>
    closeIcon <span class="token operator">=</span> defaultCloseIcon<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token operator">:</span> NotificationInstanceProps<span class="token punctuation">,</span>
  <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">n</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span> <span class="token comment">// 传入callback方法</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token comment">// 许多代码... </span>
  <span class="token punctuation">(</span>Notification <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      prefixCls<span class="token punctuation">,</span>
      <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>prefixCls<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>placement<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token function">getPlacementStyle</span><span class="token punctuation">(</span>placement<span class="token punctuation">,</span> top<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">,</span>
      getContainer<span class="token punctuation">,</span>
      <span class="token literal-property property">closeIcon</span><span class="token operator">:</span> closeIconToRender<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">notification</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      notificationInstance<span class="token punctuation">[</span>cacheKey<span class="token punctuation">]</span> <span class="token operator">=</span> notification<span class="token punctuation">;</span>
      <span class="token function">callback</span><span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将notification的实例抛出</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 另一个项目 rc-notification</span>

Notification<span class="token punctuation">.</span><span class="token function-variable function">newInstance</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">newNotificationInstance</span><span class="token punctuation">(</span><span class="token parameter">properties<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 许多代码...</span>
  <span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">notification</span><span class="token operator">:</span> Notification</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 将notification的实例抛出</span>
      <span class="token function">notice</span><span class="token punctuation">(</span><span class="token parameter">noticeProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        notification<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>noticeProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">removeNotice</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        notification<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> notification<span class="token punctuation">,</span>
      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ReactDOM<span class="token punctuation">.</span><span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
        div<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Notification <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到,调用一个方法可能嵌套好几个方法并且跨域项目.对于这么复杂的结构我们要如何解读呢? <strong>看callback 和 函数名</strong></p><p><code>notice</code> 方法调用了 <code>getNotificationInstance</code> 方法. getNotificationInstance 具有回调函数,看它的名字,这是一个获取notification实例的方法, 可以看到传入回调函数的参数正是 <code>notification</code></p><p><strong>那么后续不管有多少层回调,永远记住,抛出的只是一个 notification实例</strong></p><p>我们可以继续往后看 <code>getNotificationInstance</code> 调用了 <code>Notification.newInstance</code> 方法, 方法抛出了一个 <strong>notification实例</strong></p><p><code>Notification.newInstance</code> 在ref函数中抛出了:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 
      <span class="token function">notice</span><span class="token punctuation">(</span><span class="token parameter">noticeProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        notification<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>noticeProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">removeNotice</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        notification<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> notification<span class="token punctuation">,</span>
      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ReactDOM<span class="token punctuation">.</span><span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
        div<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接看可能会一头雾水,这是什么东西,但是还记得我们刚才说的吗, 后续不管有多少层回调,抛出的只是一个 <strong>notification实例</strong>.</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>callback</code>函数帮我们<strong>屏蔽了内层的逻辑</strong>, 与语义化函数相配合,能够很好的提升代码的可读性.</p>`,19),e=[o];function c(i,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","02.回调函数.html.vue"]]);export{r as default};
