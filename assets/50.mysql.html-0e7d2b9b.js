import{_ as e,p as s,q as a,a1 as n}from"./framework-c8e009f3.js";const l={},i=n(`<h2 id="拉取镜像" tabindex="-1"><a class="header-anchor" href="#拉取镜像" aria-hidden="true">#</a> 拉取镜像</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="运行容器" tabindex="-1"><a class="header-anchor" href="#运行容器" aria-hidden="true">#</a> 运行容器</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>解析：</strong></p><ul><li><code>-itd</code> : 意思是 <code>-i</code> 、 <code>-t</code> 、 <code>-d</code> ： <ul><li><code>i</code> : <em>interactive</em> ，表示以交互模式运行容器，通常与 <code>-t</code> 同时使用。</li><li><code>t</code> : <em>tty</em> ，表示分配一个 &quot;pseudo-tty&quot;， 即为容器分配一个伪输入终端（当前终端正在运行，需要在伪终端中进行输入输出）。</li><li><code>d</code> : <em>detach</em> 分离，表示以后台模式运行容器，返回容器id</li></ul></li><li><code>--name</code> : 指定mysql容器的名字，在未指定的情况下，docker会为容器自动分配UUID长标识符; 它生成一个随机字符串作为名称。</li><li><code>-p</code> : <em>punish list</em> ，表示容器向主机开放一个或一组端口。这里表示将容器的3306端口映射到主机的3306端口。</li><li><code>-e</code> : <em>env list</em> ,设置系统变量，这里设置mysql的root用户的密码</li><li>最后一个mysql ： <code>docker run [参数] mysql</code>，以mysql镜像运行容器</li></ul><h2 id="远程连接" tabindex="-1"><a class="header-anchor" href="#远程连接" aria-hidden="true">#</a> 远程连接</h2><p>此时如果配置好防火墙，远程主机开放了3306端口的话，已经可以正常与远程主机的mysql服务器建立连接。</p><p>但腾讯云和阿里云服务器除了主机自身的防火墙软件外，还套了一层云防火墙。如果你用的是这两家的服务器，还需要登录网页控制台来开放云防火墙的3306端口。</p><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20230118193339.png" alt=""></p><h2 id="存储数据" tabindex="-1"><a class="header-anchor" href="#存储数据" aria-hidden="true">#</a> 存储数据</h2><p><em>docker</em> 默认用其自身内部的卷(<em>volume</em>)管理将数据库文件写入主机系统的磁盘上。但对主机上的其他软件和工具来说很难从容器外部和这些数据进行交互。</p><p>所以更推荐的做法是在容器外部，在主机上建立加载（<em>mount</em>）容器内的卷数据。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">-v</span> /home/ubuntu/mysql/datadir:/var/lib/mysql <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token parameter variable">-d</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这行命令只加了一个参数：<code>-v /home/ubuntu/mysql/datadir:/var/lib/mysql</code> ，表示将主机的 <code>/home/ubuntu/mysql/datadir</code> 路径下的文件和容器内的 <code>/var/lib/mysql</code> 同步。</p><p><code>-v</code> 即 <code>--volume list</code> ，表示绑定挂载一个卷。</p><p>现在我们将容器删除后，主机 <code>/home/ubuntu/mysql/datadir</code> 下的数据依旧存在。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ubuntu@VM-12-7-ubuntu:~/mysql$ <span class="token function">sudo</span> <span class="token function">docker</span> stop mysql
mysql
ubuntu@VM-12-7-ubuntu:~/mysql$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">rm</span> mysql
mysql
ubuntu@VM-12-7-ubuntu:~/mysql$ <span class="token function">ls</span>
datadir
ubuntu@VM-12-7-ubuntu:~/mysql$ <span class="token builtin class-name">cd</span> datadir
ubuntu@VM-12-7-ubuntu:~/mysql/datadir$ <span class="token function">ls</span>
<span class="token string">&#39;#ib_16384_0.dblwr&#39;</span>   binlog.000002     ib_buffer_pool   performance_schema   undo_001
<span class="token string">&#39;#ib_16384_1.dblwr&#39;</span>   binlog.index      ibdata1          private_key.pem      undo_002
<span class="token string">&#39;#innodb_redo&#39;</span>        ca-key.pem        learnjdbc        public_key.pem
<span class="token string">&#39;#innodb_temp&#39;</span>        ca.pem            mysql            server-cert.pem
 auto.cnf             client-cert.pem   mysql.ibd        server-key.pem
 binlog.000001        client-key.pem    mysql.sock       sys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后我们再通过相同的指令创建一个新容器，同步数据是双向的，我们会得到删除之前相同的数据库。读者可以自行对数据库进行一些操作后再删除还原，此处不再演示。</p>`,19),d=[i];function c(r,t){return s(),a("div",null,d)}const p=e(l,[["render",c],["__file","50.mysql.html.vue"]]);export{p as default};
