import{_ as t,M as r,p as l,q as n,R as e,t as o,N as i,a1 as c}from"./framework-c8e009f3.js";const a={},s=c('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>一个<code>Redux</code>官方推荐的标准化<code>redux</code>数据流的工具。它主要负责以下任务：</p><ul><li>配置<code>Redux store</code></li><li>不用手动一个个添加<code>redux</code>的工具包，它是一个工具库</li><li>抽象模板代码为函数，即开即用</li></ul><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2>',4),u=e("li",null,[e("code",null,"configureStore()"),o(": 是"),e("code",null,"createStore"),o("方法的一层封装，加入中间件和"),e("code",null,"redux-thunk"),o("，启用"),e("code",null,"Redux DevTools Extension")],-1),_=e("code",null,"createReducer()",-1),h={href:"https://github.com/immerjs/immer",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"state",-1),p=e("code",null,"（state.xxx = xxx）",-1),m=c("<li><code>createSlice()</code> : <code>reducer</code>的包装器，自动生成相关<code>Action</code>,包含<code>createAction</code>和<code>createReducer</code></li><li><code>createAsyncThunk()</code> : 接收一个<code>action</code>，返回一个<code>promise</code>对象，并生成三个<code>dispatch</code>方法来通知这个<code>promise</code>对象的状态，分别是<strong>pending/fulfilled/rejected</strong></li><li><code>createEntityAdapter()</code> : 生成一些可重用的<code>reducer</code>和<code>selector</code></li><li><code>createSelector()</code> : <code>Selector</code>的生成器</li><li><code>createAction()</code> : <code>Action</code>的生成器</li>",5);function f(k,R){const d=r("ExternalLinkIcon");return l(),n("div",null,[s,e("ul",null,[u,e("li",null,[_,o(" : 通过"),e("a",h,[o("immer"),i(d)]),o(" 实现了"),x,o("不可变更新，也就是说你可以这样写代码了："),p]),m])])}const g=t(a,[["render",f],["__file","02.Redux-Toolkit.html.vue"]]);export{g as default};
