import{_ as o,M as r,p as c,q as l,R as n,t as e,N as s,a1 as t}from"./framework-c8e009f3.js";const p={},i=t('<h2 id="spring-data-jpa是什么" tabindex="-1"><a class="header-anchor" href="#spring-data-jpa是什么" aria-hidden="true">#</a> Spring-Data-JPA是什么</h2><p><em>Spring-Data-JPA</em> 是 <em>Spring</em> 基于 <em>ORM</em> 框架、<em>JPA</em> 规范的基础上封装的一套 <em>JPA</em> 应用框架，底层使用了 <em>Hibernate</em> 的 <em>JPA</em> 技术实现.</p>',2),d={href:"/java/420.Spring-Hibernate.html#JPA%E4%B8%8E%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hibernate",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"定义在javax.persistence 包内 Java持久化查询语言",-1),u=n("em",null,"Hibernate",-1),_={href:"/java/420.Spring-Hibernate.html#%E4%BD%BF%E7%94%A8HQL%E6%9F%A5%E8%AF%A2",target:"_blank",rel:"noopener noreferrer"},h={href:"https://docs.oracle.com/cd/E11035_01/kodo41/full/html/ejb3_langref.html",target:"_blank",rel:"noopener noreferrer"},k=t('<p><em>JPQL</em> 是 <em>JPA 1.0</em> 引入的查询语言，而 <em>JPA 2.0</em> 引入了新的查询规范 <em>Criteria API</em> . 并且 <em>Spring-Data-JPA</em> 底层使用了 <em>hibernate</em> 的 <code>CriteriaQueryImpl</code> 来实现 <em>Criteria API</em>。</p><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2>',2),g=n("em",null,"Spring Boot",-1),A={href:"/java/450.Spring-Boot.html#Spring-boot%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"SimpleJpaRepository",-1),f=t(`<p>不仅如此，<em>Spring-Boot</em> 还能够根据方法名解析一些常用的SQL语句，比如下面这个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByEmailAddressAndLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAddress<span class="token punctuation">,</span> <span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>findByEmailAddressAndLastname</code> 中的 <code>findBy</code> 是固定格式，它表示在表中查询名字为 <code>emailAdddress</code> 和 <code>lastname</code> 两个属性，参数由调用方法时传入。</p><p>它实际上被解析为 Criteria语句： <code>select u from User u where u.emailAddress = ?1 and u.lastname = ?2</code>。</p>`,4),b=n("em",null,"Spring-Boot",-1),E=n("code",null,"Matcher",-1),J=n("code",null,"PartTree",-1),P={href:"https://www.helloworld.net/p/0540646934",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>如果我们要直接自定义Criteria来操作数据库，可以用注解 <code>@Query</code> 来实现，如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.emailAddress = ?1&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">User</span> <span class="token function">findByEmailAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),S={href:"https://www.cnblogs.com/bodhitree/p/9468585.html",target:"_blank",rel:"noopener noreferrer"};function j(y,w){const a=r("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[e("我们前面提过，Java提供了一个与数据库交互的标准 "),n("a",d,[e("JPA(Java persistData API)"),s(a)]),e(".但实际上， JPA还有另外一个意思："),m,e("。")]),n("p",null,[e("你可以理解为Java官方也有自己对这个接口进行了实现，并且和 "),u,e("提供的 "),n("a",_,[e("HQL"),s(a)]),e("查询语句一样，JPA也提供了一套自己的查询语句"),n("a",h,[e("JPQL"),s(a)]),e(".")]),k,n("p",null,[e("前面我们提过，"),g,e(" 会在"),n("a",A,[e("初始化的过程"),s(a)]),e("中帮我们实现了一些数据库相关的接口，比如 "),v,e(" .")]),f,n("p",null,[e("这种解析是 "),b,e(" 在底层通过正则表达式 "),E,e(" 来解析一个方法名（字符串）为一个一个的Part(最后形成一个 "),J,e(" ).详细源码解析可以参考 "),n("a",P,[e("这篇文章"),s(a)]),e(".")]),B,n("p",null,[e("其他基本数据库操作语句、分页查询、多表查询可以查看"),n("a",S,[e("这篇文章"),s(a)]),e("。")])])}const L=o(p,[["render",j],["__file","470.Spring-Data-JPA.html.vue"]]);export{L as default};
