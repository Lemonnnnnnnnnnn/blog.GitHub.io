import{_ as t,M as p,p as o,q as c,R as s,t as n,N as l,a1 as a}from"./framework-c8e009f3.js";const i={},r=a(`<h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p><strong>函数的返回值等同于函数体最后一个表达式的值</strong>。使用 return 关键字和指定值，可从函数中提前返回；但大部分函数隐式的返回最后的表达式。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">five</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span> <span class="token comment">// 箭头指向返回值的类型</span>
    <span class="token number">5</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="表达式与语句" tabindex="-1"><a class="header-anchor" href="#表达式与语句" aria-hidden="true">#</a> 表达式与语句</h2><p>我们上面在函数的返回值处提到了<strong>表达式</strong>，编译器是如何区分表达式和语句的呢？</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  x <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 没有分号是表达式，作为花括号的 return 值</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 有分号是语句，没有任何返回值</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h2><h3 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> element <span class="token keyword">in</span> a <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;the value is: {element}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loop" tabindex="-1"><a class="header-anchor" href="#loop" aria-hidden="true">#</a> loop</h3><p>loop = while(1).</p><p><strong>从 loop 返回值可以在 break 后跟一个语句：</strong></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>
  counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> counter <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">{</span>
    <span class="token keyword">break</span> counter <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>循环标签</strong></p><p>你可以用<code>&#39;name</code> 给 loop 取名字，这样在多重循环中就可以直接跳出外层循环。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>    <span class="token keyword">let</span> <span class="token keyword">mut</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token lifetime-annotation symbol">&#39;counting_up</span><span class="token punctuation">:</span> <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;count = {count}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> remaining <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

        <span class="token keyword">loop</span> <span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;remaining = {remaining}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> remaining <span class="token operator">==</span> <span class="token number">9</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span> <span class="token lifetime-annotation symbol">&#39;counting_up</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            remaining <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="控制流" tabindex="-1"><a class="header-anchor" href="#控制流" aria-hidden="true">#</a> 控制流</h2><p><strong>基本使用：</strong></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">if</span> number <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;condition was true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>rust 不会自动处理布尔值：</strong></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> number <span class="token punctuation">{</span> <span class="token comment">// 报错， expected \`bool\`, found integer；其他语言会自动将 number 从 integer 转化为 bool，而 rust 不会</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number was three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">if</span> number <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number was something other than zero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>三目运算符：</strong></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> condition <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token keyword">if</span> condition <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token keyword">if</span> condition <span class="token punctuation">{</span> <span class="token number">5</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token string">&quot;six&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 类型不兼容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><p>这样使用字符串无法通过编译：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s <span class="token punctuation">:</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 编译失败 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是因为这种 &quot;字面字符串&quot; 的写法会返回一个<strong>引用值&amp;</strong>。以下的三种写法都是允许的：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span> <span class="token comment">// s 的类型推断是&amp;str，它是一个引用，它不可改变</span>
    <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s 的类型是 String，它是一个值，它可被改变</span>
    <span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 将 s2 作为一个整体 slice 返回，他的类型推断是&amp;str</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么要区分出 <code>String</code> 和 <code>&amp;str</code> ？单单是 <code>String</code> 可变，<code>&amp;str</code> 不可变并不是一个好理由。因为 <code>let</code> 与 <code>let mut</code> 已经帮我们对变量是否可以被改变做了处理。</p><p>试想一下，如果没有 <code>&amp;str</code> ，只有 <code>String</code> ，那么通过 <code>slice</code> 切出的子字符串同样是 <code>String</code> ，也就是说 <code>String</code> 可以派生出许多其他的可变变量，<strong>这违反了 rust 内存绝对安全的原则</strong>。</p><h3 id="索引字符串" tabindex="-1"><a class="header-anchor" href="#索引字符串" aria-hidden="true">#</a> 索引字符串</h3><p>rust 中是无法使用索引来访问字符串的，因此下列代码无法通过编译：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> h <span class="token operator">=</span> s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它会报出错误：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>$ cargo run
   <span class="token class-name">Compiling</span> collections v0<span class="token number">.1</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token punctuation">(</span>file<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment">//projects/collections)</span>
error<span class="token punctuation">[</span><span class="token constant">E0277</span><span class="token punctuation">]</span><span class="token punctuation">:</span> the <span class="token keyword">type</span> \`<span class="token class-name">String</span>\` cannot be indexed by \`<span class="token punctuation">{</span>integer<span class="token punctuation">}</span>\`
 <span class="token operator">-</span><span class="token punctuation">-&gt;</span> src<span class="token operator">/</span>main<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">13</span>
  <span class="token operator">|</span>
<span class="token number">3</span> <span class="token operator">|</span>     <span class="token keyword">let</span> h <span class="token operator">=</span> s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token operator">|</span>             <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> \`<span class="token class-name">String</span>\` cannot be indexed by \`<span class="token punctuation">{</span>integer<span class="token punctuation">}</span>\`
  <span class="token operator">|</span>
  <span class="token operator">=</span> help<span class="token punctuation">:</span> the <span class="token keyword">trait</span> \`<span class="token class-name">Index</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>integer<span class="token punctuation">}</span><span class="token operator">&gt;</span>\` is not implemented <span class="token keyword">for</span> \`<span class="token class-name">String</span>\`
  <span class="token operator">=</span> help<span class="token punctuation">:</span> the following other types implement <span class="token keyword">trait</span> \`<span class="token class-name">Index</span><span class="token operator">&lt;</span><span class="token class-name">Idx</span><span class="token operator">&gt;</span>\`<span class="token punctuation">:</span>
            <span class="token operator">&lt;</span><span class="token class-name">String</span> <span class="token keyword">as</span> <span class="token class-name">Index</span><span class="token operator">&lt;</span><span class="token class-name">RangeFrom</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token class-name">String</span> <span class="token keyword">as</span> <span class="token class-name">Index</span><span class="token operator">&lt;</span><span class="token class-name">RangeFull</span><span class="token operator">&gt;&gt;</span>
            <span class="token operator">&lt;</span><span class="token class-name">String</span> <span class="token keyword">as</span> <span class="token class-name">Index</span><span class="token operator">&lt;</span><span class="token class-name">RangeInclusive</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token class-name">String</span> <span class="token keyword">as</span> <span class="token class-name">Index</span><span class="token operator">&lt;</span><span class="token class-name">RangeTo</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token class-name">String</span> <span class="token keyword">as</span> <span class="token class-name">Index</span><span class="token operator">&lt;</span><span class="token class-name">RangeToInclusive</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token class-name">String</span> <span class="token keyword">as</span> <span class="token class-name">Index</span><span class="token operator">&lt;</span><span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token class-name">Range</span><span class="token operator">&lt;</span><span class="token keyword">usize</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token keyword">str</span> <span class="token keyword">as</span> <span class="token class-name">Index</span><span class="token operator">&lt;</span><span class="token class-name">I</span><span class="token operator">&gt;&gt;</span>

<span class="token class-name">For</span> more information about this error<span class="token punctuation">,</span> <span class="token keyword">try</span> \`rustc <span class="token operator">-</span><span class="token operator">-</span>explain <span class="token constant">E0277</span>\`<span class="token punctuation">.</span>
error<span class="token punctuation">:</span> could not compile \`collections\` due to previous error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),u={href:"https://kaisery.github.io/trpl-zh-cn/ch08-02-strings.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>用梵文书写的印度语单词 “नमस्ते”，最终它储存在 vector 中的 u8 值看起来像这样：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,
224, 165, 135]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>他们组合成 6 个 char 类型的变量：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[&#39;न&#39;, &#39;म&#39;, &#39;स&#39;, &#39;्&#39;, &#39;त&#39;, &#39;े&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但第四个和第六个都不是字母，它们是发音符号本身并没有任何意义。因此展现在人面前的只有四个字母：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[&quot;न&quot;, &quot;म&quot;, &quot;स्&quot;, &quot;ते&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>rust 的开发者希望 rust 的设计应该更加通用，而无所谓是何种人类语言，因此不支持索引访问字符串。</p><p>虽然单个序列不支持被访问，但 rust 还是支持了用 <code>slice</code> 来切出一个范围的字符串，但你需要小心使用它，序列的单位是 <strong>Byte</strong> ，因为中文占用两个 Byte ，如果你尝试切出一个 Byte 时，错误就会发生：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;哈哈哈&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{s}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>thread &#39;main&#39; panicked at &#39;byte index 1 is not a char boundary; it is inside &#39;哈&#39; (bytes 0..3) of \`哈哈哈\`&#39;, src/main.rs:11:14
stack backtrace:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它告诉我们序列 1 不是一个 char 类型（char 占 1 个 Byte）的边界，“哈” 占用 3 个 Byte ，于是我们修改代码 :</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;哈哈哈&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{s}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 哈</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function k(m,v){const e=p("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("这是因为不同语言在 utf-8 编码中占用的 Byte 不同，比如一个汉字占三个 Byte，一个英文字母占一个 Byte。我们来看一个复杂的例子，这段分析摘自 "),s("a",u,[n("Rust 程序设计语言"),l(e)]),n("：")]),d])}const g=t(i,[["render",k],["__file","10.基本使用.html.vue"]]);export{g as default};
