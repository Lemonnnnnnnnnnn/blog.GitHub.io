import{_ as t,M as e,p,q as o,R as n,t as s,N as c,a1 as l}from"./framework-c8e009f3.js";const i={},u=l(`<ul><li></li></ul><h2 id="data的两种定义方式" tabindex="-1"><a class="header-anchor" href="#data的两种定义方式" aria-hidden="true">#</a> data的两种定义方式</h2><p>类型： <code>Object</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>

<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> data
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型： <code>Function</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Component <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到两种写法中，一个<code>data</code>直接定义成对象，而另一个则是以函数返回对象的方式定义。我们来解析一下这两种写法：</p><h2 id="组件和实例" tabindex="-1"><a class="header-anchor" href="#组件和实例" aria-hidden="true">#</a> 组件和实例</h2><h3 id="我们先看第二种写法-你可以将vue-extend看作是定义了一个组件对象。" tabindex="-1"><a class="header-anchor" href="#我们先看第二种写法-你可以将vue-extend看作是定义了一个组件对象。" aria-hidden="true">#</a> 我们先看第二种写法：你可以将<code>Vue.extend</code>看作是定义了一个组件对象。</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>通过**单文件组件(*.vue)**定义的组件和<code>Vue.extend</code>定义的组件本质上是一致的，只不过单文件组件需要多进行一次编译处理。</p></div><p>我们建立一个简单的组件模型：</p><ol><li>传入一个配置<code>config</code>，<code>config</code>其实就是在<code>Vue.extend()</code>中定义的内容</li><li>根据<code>config</code>生成一个代理对象<code>vm</code>，这是<code>vue</code>内部做的事情，<a href="#%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1vm%E5%AF%B9data%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F">vm做了什么</a>，我们这里用<code>class</code>代替</li><li>调用<code>new Vm()</code>生成实例，事实上就是使用<code>&lt;vm /&gt;</code>时进行的实例化操作。</li><li>修改某一个实例对象</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// data是对象</span>
<span class="token keyword">function</span> <span class="token function">objProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">class</span> <span class="token class-name">VM</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> config<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> vm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VM</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> vm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VM</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vm1<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm1<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name : bar}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm2<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {name : bar}</span>
<span class="token punctuation">}</span>


<span class="token comment">// data是函数</span>
<span class="token keyword">function</span> <span class="token function">funcProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">class</span> <span class="token class-name">VM</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> vm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VM</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token keyword">const</span> vm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VM</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vm1<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm1<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name : bar}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm2<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name : foo}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>js对<strong>对象，数组</strong>的处理和<strong>基本数据对象（如number,string）不同</strong></p><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220501122124.png" alt=""></p><p>基本数据类型会新生成一块数据并指向新数据。但对象则会指向并修改旧数据</p><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220501122308.png" alt=""></p><p>函数会返回一个新的对象，而非直接去修改旧对象，因此实例的修改不会相互影响。</p></div><h4 id="那么为什么第一种方式可以直接定义data为对象呢" tabindex="-1"><a class="header-anchor" href="#那么为什么第一种方式可以直接定义data为对象呢" aria-hidden="true">#</a> 那么为什么第一种方式可以直接定义data为对象呢？</h4><p>第一种方式采用<code>new Vue()</code>的方法直接生成了一个<strong>Vue实例对象</strong>，不存在复用的可能性，也不会出现实例间的数据相互影响。</p><h2 id="代理对象vm对data做了什么" tabindex="-1"><a class="header-anchor" href="#代理对象vm对data做了什么" aria-hidden="true">#</a> 代理对象vm对data做了什么？</h2>`,17),d=n("code",null,"data",-1),r=n("code",null,"get/set",-1),k=n("code",null,"vm.$data",-1),v=n("strong",null,"响应式的更新",-1),m={href:"/vue/01.Vue%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/02.%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.html",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,[s("将"),n("code",null,"data"),s("的属性直接定义成"),n("code",null,"vm"),s("实例上的属性，因此访问 "),n("code",null,"vm.a"),s(" 等价于访问 "),n("code",null,"vm.$data.a")],-1);function g(h,f){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("ol",null,[n("li",null,[s("初始"),d,s("被递归添加了"),r,s("方法后定义为"),k,s("挂载在实例上。这样做是为了进行"),v,s("，具体原理查看"),n("a",m,[s("观察者模式"),c(a)])]),b])])}const _=t(i,[["render",g],["__file","10.data.html.vue"]]);export{_ as default};
