import{_ as s,p as n,q as a,a1 as e}from"./framework-c8e009f3.js";const t={},o=e(`<h2 id="表查询" tabindex="-1"><a class="header-anchor" href="#表查询" aria-hidden="true">#</a> 表查询</h2><h3 id="查询所有行" tabindex="-1"><a class="header-anchor" href="#查询所有行" aria-hidden="true">#</a> 查询所有行：</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>SELECT 1 ;</code> 可以用来测试数据库连接</p></div><h3 id="条件查询" tabindex="-1"><a class="header-anchor" href="#条件查询" aria-hidden="true">#</a> 条件查询</h3><p><strong>IF：</strong></p><p><code>SELECT * FROM &lt;表名&gt; WHERE &lt;条件表达式&gt;</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> score <span class="token operator">&gt;=</span> <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>与：</strong></p><p><code>SELECT * FROM &lt;表名&gt; WHERE &lt;条件一&gt; AND &lt;条件二&gt;</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> students <span class="token keyword">WHERE</span> class_id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">AND</span> SCORE <span class="token operator">&gt;=</span> <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>sql中没有赋值和变量，可以直接用<code>=</code>代表等号</p></div><p><strong>或：</strong></p><p><code>SELECT * FROM &lt;表名&gt; WHERE &lt;条件一&gt; OR &lt;条件二&gt;</code></p><p><strong>非：</strong></p><p><code>SELECT * FROM &lt;表名&gt; WHERE NOT &lt;条件一&gt;</code></p><p>更常用的： <code>SELECT * FROM &lt;表名&gt; WHERE class_id &lt;&gt; 2</code> 等于 <code>SELECT * FROM &lt;表名&gt; WHERE NOT class_id = 2</code> <strong>将=换成<code>&lt;&gt;</code>表示不等</strong></p><h4 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级" aria-hidden="true">#</a> 优先级</h4><p>NOT &gt; AND &gt; OR , 加上括号可以改变优先级；例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 分数小于80或大于90的男性</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>score <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token operator">OR</span> score <span class="token operator">&gt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token operator">AND</span> gender <span class="token operator">=</span> <span class="token string">&#39;M&#39;</span><span class="token punctuation">;</span> 
<span class="token comment">-- 分数小于80或 分数大于90且是男性</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> score <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token operator">OR</span> score <span class="token operator">&gt;</span> <span class="token number">90</span> <span class="token operator">AND</span> gender <span class="token operator">=</span> <span class="token string">&#39;M&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>AND</code> 大于 <code>OR</code> ， 所以在第二个表达式中，会优先计算后面的式子。</p><h4 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h4><p><strong>a BETWEEN x AND y</strong>，取某一个区间，等价于 <code>a &gt;= x + a &lt;= y</code></p><p>以下两种写法等价：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">WHERE</span> score <span class="token operator">BETWEEN</span> <span class="token number">60</span> <span class="token operator">AND</span> <span class="token number">90</span>
<span class="token keyword">WHERE</span> score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token operator">AND</span> score <span class="token operator">&lt;=</span> <span class="token number">90</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>LIKE + %</strong>: 判断字符串是否相似， <code>%</code> 可以代替任意字符</p><p>例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">&quot;%明&quot;</span> <span class="token comment">-- 小明 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="投影查询" tabindex="-1"><a class="header-anchor" href="#投影查询" aria-hidden="true">#</a> 投影查询</h3><p>当我们查询时，使用 <code>SELECT * FROM</code> 会将匹配数据的所有信息（所有列）查询出来,比如我们想将所有 <code>K</code> 开头的城市筛选出来：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> 
<span class="token keyword">FROM</span> CITY 
<span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">&quot;K%&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220614135738.png" alt=""></p><p>但是假设我们只需要某几列呢？例如我们只想要 <code>CountryCode</code> 和 <code>District</code> 两行数据，这时我们的查询被叫做 <strong>投影查询</strong>, 我们只需简单的将列名用逗号分隔放在 <code>SELECT</code> 后面即可</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> CountryCode<span class="token punctuation">,</span>District 
<span class="token keyword">FROM</span> CITY 
<span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">&quot;K%&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220614140032.png" alt=""></p><h4 id="别名" tabindex="-1"><a class="header-anchor" href="#别名" aria-hidden="true">#</a> 别名</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 
CountryCode cc<span class="token punctuation">,</span>
District d
<span class="token keyword">FROM</span> CITY 
<span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">&quot;K%&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220615141841.png" alt=""></p><h3 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h3><p>在 <code>WHERE</code> 语句后面加上 <code>ORDER BY 列名</code>，默认正序，倒叙为 <code>ORDER BY 列名 DESC</code></p><div class="language-SQL line-numbers-mode" data-ext="SQL"><pre class="language-SQL"><code>SELECT CountryCode,District 
FROM CITY 
WHERE NAME LIKE &quot;K%&quot; 
ORDER BY CountryCode;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220614142334.png" alt=""></p><p>如果有相同值我们可以按其他列作为进一步排序的依据，将排序语句逗号隔开，比如我们先按国家编码正序排列，再按区域名倒叙排列：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> CountryCode<span class="token punctuation">,</span>District 
<span class="token keyword">FROM</span> CITY 
<span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">&quot;K%&quot;</span> 
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> CountryCode<span class="token punctuation">,</span>District <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询" aria-hidden="true">#</a> 分页查询</h3><p><code>LIMIT 一页多少记录 OFFSET 从第几条记录开始查</code></p><div class="language-SQL line-numbers-mode" data-ext="SQL"><pre class="language-SQL"><code>SELECT CountryCode,District
FROM CITY 
WHERE NAME LIKE &quot;K%&quot; 
ORDER BY CountryCode,District DESC
LIMIT 10 OFFSET 0;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="聚合查询" tabindex="-1"><a class="header-anchor" href="#聚合查询" aria-hidden="true">#</a> 聚合查询</h3><p>为了统计一张表的数据量，SQL提供了专门的聚合函数，<code>COUNT(* 或列名)</code>用于查询一共有多少条记录：：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> 
<span class="token keyword">FROM</span> CITY 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其他聚合函数：</p><ul><li><strong>SUM</strong>: 计算某列合计值，必须是数值类型</li><li><strong>AVG</strong>: 计算某列平均值，必须是数值类型</li><li><strong>MAX</strong>: 计算某列最大值，若不是数值，返回最后一条数据</li><li><strong>MIN</strong>: 计算某列最小值，若不是数值，返回第一条数据</li></ul><h4 id="聚合分组" tabindex="-1"><a class="header-anchor" href="#聚合分组" aria-hidden="true">#</a> 聚合分组</h4><p>假如我们要统计每个国家分别有多少城市，我们可以：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CountryCode <span class="token keyword">FROM</span> CITY <span class="token keyword">WHERE</span> CountryCode <span class="token operator">=</span> <span class="token string">&#39;CHN&#39;</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CountryCode <span class="token keyword">FROM</span> CITY <span class="token keyword">WHERE</span> CountryCode <span class="token operator">=</span> <span class="token string">&#39;USA&#39;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但我们不可能一个个手动统计所有国家：我们应该使用 <code>GROUP BY</code> 标识符：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CountryCode
<span class="token keyword">FROM</span> CITY
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> CountryCode
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220614162828.png" alt=""></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>SELECT 选择需要查询的<strong>列</strong>信息</p><p>GROUP BY 列名 ： 将该列重复的值作为一<strong>行</strong></p></div><h3 id="多表查询" tabindex="-1"><a class="header-anchor" href="#多表查询" aria-hidden="true">#</a> 多表查询</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students<span class="token punctuation">,</span> classes<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回数据为两表的 <strong>乘积</strong>，它的结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>学生一列一 | 学生一列二 | 班级一列一 | 班级一列二
学生一列一 | 学生一列二 | 班级二列一 | 班级二列二
学生一列一 | 学生一列二 | 班级三列一 | 班级三列二
...

学生二列一 | 学生二列二 | 班级一列一 | 班级一列二
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>结果集的列数是 <code>students</code> 表和 <code>classes</code> 表的列数之和，行数是 <code>students</code> 表和 <code>classes</code> 表的行数之积。</p></blockquote><h4 id="别名-1" tabindex="-1"><a class="header-anchor" href="#别名-1" aria-hidden="true">#</a> 别名</h4><p>两个表中如果都有id（这是常见的情况），可以用 <code>表名.列名 别名</code> 来设置列的别名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    students<span class="token punctuation">.</span>id sid<span class="token punctuation">,</span>
    students<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    students<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>
    students<span class="token punctuation">.</span>score<span class="token punctuation">,</span>
    classes<span class="token punctuation">.</span>id cid<span class="token punctuation">,</span>
    classes<span class="token punctuation">.</span>name cname
<span class="token keyword">FROM</span> students<span class="token punctuation">,</span> classes<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样也可以为表设置别名：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    s<span class="token punctuation">.</span>id sid<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>score<span class="token punctuation">,</span>
    c<span class="token punctuation">.</span>id cid<span class="token punctuation">,</span>
    c<span class="token punctuation">.</span>name cname
<span class="token keyword">FROM</span> students s<span class="token punctuation">,</span> classes c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>事实上多表查询与条件语句配合使用才是更常见的情况：</p></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    s<span class="token punctuation">.</span>id sid<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>score<span class="token punctuation">,</span>
    c<span class="token punctuation">.</span>id cid<span class="token punctuation">,</span>
    c<span class="token punctuation">.</span>name cname
<span class="token keyword">FROM</span> students s<span class="token punctuation">,</span> classes c
<span class="token keyword">WHERE</span> s<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">&#39;M&#39;</span> <span class="token operator">AND</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="连接查询" tabindex="-1"><a class="header-anchor" href="#连接查询" aria-hidden="true">#</a> 连接查询</h3><p>多表查询做的事情同样也可以用连接查询来写，例如我们通过多表查询将学生名和它的班级筛选出来：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
    s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
    c<span class="token punctuation">.</span>name class_name
<span class="token keyword">FROM</span> students s<span class="token punctuation">,</span> classes c
<span class="token keyword">WHERE</span> S<span class="token punctuation">.</span>class_id <span class="token operator">=</span> C<span class="token punctuation">.</span>id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>连接查询的意思是用第一张表构建一张主表，然后通过 <code>JOIN</code> 语句将查询其他表的结果连接到主表上，对其他表的条件筛选用 <code>ON</code> 关键字：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> S<span class="token punctuation">.</span>name <span class="token punctuation">,</span> C<span class="token punctuation">.</span>name class_name
<span class="token keyword">from</span> STUDENTS S
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> classes C
<span class="token keyword">ON</span> S<span class="token punctuation">.</span>class_id <span class="token operator">=</span> C<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220615150434.png" alt=""></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>ON</code> 关键字和 <code>WHERE</code> 关键字不冲突，都可以添加</p></div><p>然而连接查询也有它自己的特点：<strong>取交并集</strong></p><ul><li><strong>INNER JOIN</strong> : 取两表交集</li></ul><p><img src="https://www.liaoxuefeng.com/files/attachments/1246892164662976/l" alt=""></p><ul><li><strong>LEFT OUTER JOIN</strong> : 左表展示所有的行</li></ul><p><img src="https://www.liaoxuefeng.com/files/attachments/1246893588481376/l" alt=""></p><ul><li><strong>RIGHT OUTER JOIN</strong> ： 右表展示所有的行</li></ul><p><img src="https://www.liaoxuefeng.com/files/attachments/1246893609222688/l" alt=""></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>MYSQL不支持全关联 <code>FULL OUTER JOIN</code></p></div><div class="language-SQL line-numbers-mode" data-ext="SQL"><pre class="language-SQL"><code>SELECT S.name , C.name class_name
from STUDENTS S
RIGHT OUTER JOIN classes C
ON S.class_id = C.id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://linyc.oss-cn-beijing.aliyuncs.com/20220615151725.png" alt=""></p><p>可以看到，虽然班级四没有匹配到的学生，但是因为右表要展示所有行，所以班级四匹配的学生是 <code>NULL</code></p><h2 id="其他查询" tabindex="-1"><a class="header-anchor" href="#其他查询" aria-hidden="true">#</a> 其他查询</h2><ul><li>列出所有数据库 ： <code>SHOW DATABASES;</code></li><li>列出所有表： <code>SHOW TABLES;</code></li><li>查看一个表的结构： <code>DESC 表名;</code></li></ul>`,91),c=[o];function l(i,p){return n(),a("div",null,c)}const r=s(t,[["render",l],["__file","02.查询.html.vue"]]);export{r as default};
