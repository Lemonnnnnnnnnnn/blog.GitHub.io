import{_ as n,p as s,q as a,a1 as t}from"./framework-c8e009f3.js";const p={},e=t(`<h2 id="useswrinfinite" tabindex="-1"><a class="header-anchor" href="#useswrinfinite" aria-hidden="true">#</a> useSWRInfinite</h2><p>上一节中我们虽然用 <code>useSwr</code> 成功实现了无限加载列表，但要注意的是，useSwr其实并不适用于这种场景，它将数据请求封装在组件中，如果需要统计每一个组件的数据和，例如获取所有页的记录总条数，useSwr是不方便实现的。</p><p><code>useSWRInfinite</code>从名字上看就是为无限加载列表服务的。它的原理是将所有请求获取到的数据不断Push进一个缓存列表，每次进行新请求时都从这个列表中获取一定数量的页数。它的结构如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> isValidating<span class="token punctuation">,</span> mutate<span class="token punctuation">,</span> size<span class="token punctuation">,</span> setSize <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSWRInfinite</span><span class="token punctuation">(</span>
  getKey<span class="token punctuation">,</span> fetcher<span class="token operator">?</span><span class="token punctuation">,</span> options<span class="token operator">?</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和useSwr最主要的区别在于它用<code>getKey</code>函数替换了 <code>key</code> ， 返回值多了 <code>size</code> 以及 <code>setSize</code>。</p><ul><li><strong>getKey</strong> 接收想要获取的页号作为参数，并返回请求地址（key值），<strong>页号默认为0</strong></li><li><strong>size</strong> 标记着从缓存数据中取了多少条数据，<strong>默认为页号数+1</strong></li><li><strong>setSize</strong> : 允许我们提供新的页号，并根据新页号重新调用 <code>getKey</code> 方法和 <code>fetcher</code> 方法</li></ul><p>useSWRInfinite 可以轻松的获取到数据总条数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useSWRInfinite <span class="token keyword">from</span> <span class="token string">&#39;swr/infinite&#39;</span>

<span class="token keyword">const</span> <span class="token function-variable function">fetcher</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">getKey</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://animechan.vercel.app/api/quotes/anime?title=naruto&amp;page=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">Preload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> size<span class="token punctuation">,</span> setSize<span class="token punctuation">,</span> isValidating <span class="token punctuation">}</span> <span class="token operator">=</span>
        <span class="token function">useSWRInfinite</span><span class="token punctuation">(</span>getKey<span class="token punctuation">,</span> fetcher<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">revalidateFirstPage</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// 是否每次都刷新第一页数据</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;loading...&#39;</span>

    <span class="token keyword">const</span> record_num <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        total <span class="token operator">+=</span> current<span class="token punctuation">.</span>length
        <span class="token keyword">return</span> total
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
            show <span class="token punctuation">{</span>data<span class="token punctuation">.</span>length<span class="token punctuation">}</span> page <span class="token keyword">of</span> <span class="token punctuation">{</span>record_num<span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setSize</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span> disabled<span class="token operator">=</span><span class="token punctuation">{</span>isValidating<span class="token punctuation">}</span><span class="token operator">&gt;</span>load more<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>clear<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
            <span class="token punctuation">{</span>info<span class="token punctuation">}</span>
            <span class="token punctuation">{</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">page</span> <span class="token operator">=&gt;</span> page<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">anime<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>anime<span class="token punctuation">.</span>quote<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Preload<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","04.无限加载列表.html.vue"]]);export{r as default};
